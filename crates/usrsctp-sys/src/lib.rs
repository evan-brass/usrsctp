/* automatically generated by rust-bindgen 0.72.0 */

#![allow(non_snake_case, non_upper_case_globals, non_camel_case_types)]

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
	#[inline]
	pub const fn new() -> Self {
		__IncompleteArrayField(::std::marker::PhantomData, [])
	}
	#[inline]
	pub fn as_ptr(&self) -> *const T {
		self as *const _ as *const T
	}
	#[inline]
	pub fn as_mut_ptr(&mut self) -> *mut T {
		self as *mut _ as *mut T
	}
	#[inline]
	pub unsafe fn as_slice(&self, len: usize) -> &[T] {
		::std::slice::from_raw_parts(self.as_ptr(), len)
	}
	#[inline]
	pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
		::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
	}
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
	fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
		fmt.write_str("__IncompleteArrayField")
	}
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
	#[inline]
	pub const fn new() -> Self {
		__BindgenUnionField(::std::marker::PhantomData)
	}
	#[inline]
	pub unsafe fn as_ref(&self) -> &T {
		::std::mem::transmute(self)
	}
	#[inline]
	pub unsafe fn as_mut(&mut self) -> &mut T {
		::std::mem::transmute(self)
	}
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
	#[inline]
	fn default() -> Self {
		Self::new()
	}
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
	#[inline]
	fn clone(&self) -> Self {
		*self
	}
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
	fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
		fmt.write_str("__BindgenUnionField")
	}
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
	fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
	fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
		true
	}
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __darwin_socklen_t = __uint32_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type sa_family_t = __uint8_t;
pub type socklen_t = __darwin_socklen_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
	pub sa_len: __uint8_t,
	pub sa_family: sa_family_t,
	pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
	["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 1usize];
	["Offset of field: sockaddr::sa_len"][::std::mem::offset_of!(sockaddr, sa_len) - 0usize];
	["Offset of field: sockaddr::sa_family"][::std::mem::offset_of!(sockaddr, sa_family) - 1usize];
	["Offset of field: sockaddr::sa_data"][::std::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
	pub ss_len: __uint8_t,
	pub ss_family: sa_family_t,
	pub __ss_pad1: [::std::os::raw::c_char; 6usize],
	pub __ss_align: __int64_t,
	pub __ss_pad2: [::std::os::raw::c_char; 112usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sockaddr_storage"][::std::mem::size_of::<sockaddr_storage>() - 128usize];
	["Alignment of sockaddr_storage"][::std::mem::align_of::<sockaddr_storage>() - 8usize];
	["Offset of field: sockaddr_storage::ss_len"]
		[::std::mem::offset_of!(sockaddr_storage, ss_len) - 0usize];
	["Offset of field: sockaddr_storage::ss_family"]
		[::std::mem::offset_of!(sockaddr_storage, ss_family) - 1usize];
	["Offset of field: sockaddr_storage::__ss_pad1"]
		[::std::mem::offset_of!(sockaddr_storage, __ss_pad1) - 2usize];
	["Offset of field: sockaddr_storage::__ss_align"]
		[::std::mem::offset_of!(sockaddr_storage, __ss_align) - 8usize];
	["Offset of field: sockaddr_storage::__ss_pad2"]
		[::std::mem::offset_of!(sockaddr_storage, __ss_pad2) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
	pub s_addr: in_addr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of in_addr"][::std::mem::size_of::<in_addr>() - 4usize];
	["Alignment of in_addr"][::std::mem::align_of::<in_addr>() - 4usize];
	["Offset of field: in_addr::s_addr"][::std::mem::offset_of!(in_addr, s_addr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
	pub sin_len: __uint8_t,
	pub sin_family: sa_family_t,
	pub sin_port: in_port_t,
	pub sin_addr: in_addr,
	pub sin_zero: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sockaddr_in"][::std::mem::size_of::<sockaddr_in>() - 16usize];
	["Alignment of sockaddr_in"][::std::mem::align_of::<sockaddr_in>() - 4usize];
	["Offset of field: sockaddr_in::sin_len"]
		[::std::mem::offset_of!(sockaddr_in, sin_len) - 0usize];
	["Offset of field: sockaddr_in::sin_family"]
		[::std::mem::offset_of!(sockaddr_in, sin_family) - 1usize];
	["Offset of field: sockaddr_in::sin_port"]
		[::std::mem::offset_of!(sockaddr_in, sin_port) - 2usize];
	["Offset of field: sockaddr_in::sin_addr"]
		[::std::mem::offset_of!(sockaddr_in, sin_addr) - 4usize];
	["Offset of field: sockaddr_in::sin_zero"]
		[::std::mem::offset_of!(sockaddr_in, sin_zero) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
	pub __u6_addr: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
	pub __u6_addr8: [__uint8_t; 16usize],
	pub __u6_addr16: [__uint16_t; 8usize],
	pub __u6_addr32: [__uint32_t; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of in6_addr__bindgen_ty_1"][::std::mem::size_of::<in6_addr__bindgen_ty_1>() - 16usize];
	["Alignment of in6_addr__bindgen_ty_1"]
		[::std::mem::align_of::<in6_addr__bindgen_ty_1>() - 4usize];
	["Offset of field: in6_addr__bindgen_ty_1::__u6_addr8"]
		[::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr8) - 0usize];
	["Offset of field: in6_addr__bindgen_ty_1::__u6_addr16"]
		[::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr16) - 0usize];
	["Offset of field: in6_addr__bindgen_ty_1::__u6_addr32"]
		[::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of in6_addr"][::std::mem::size_of::<in6_addr>() - 16usize];
	["Alignment of in6_addr"][::std::mem::align_of::<in6_addr>() - 4usize];
	["Offset of field: in6_addr::__u6_addr"][::std::mem::offset_of!(in6_addr, __u6_addr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
	pub sin6_len: __uint8_t,
	pub sin6_family: sa_family_t,
	pub sin6_port: in_port_t,
	pub sin6_flowinfo: __uint32_t,
	pub sin6_addr: in6_addr,
	pub sin6_scope_id: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sockaddr_in6"][::std::mem::size_of::<sockaddr_in6>() - 28usize];
	["Alignment of sockaddr_in6"][::std::mem::align_of::<sockaddr_in6>() - 4usize];
	["Offset of field: sockaddr_in6::sin6_len"]
		[::std::mem::offset_of!(sockaddr_in6, sin6_len) - 0usize];
	["Offset of field: sockaddr_in6::sin6_family"]
		[::std::mem::offset_of!(sockaddr_in6, sin6_family) - 1usize];
	["Offset of field: sockaddr_in6::sin6_port"]
		[::std::mem::offset_of!(sockaddr_in6, sin6_port) - 2usize];
	["Offset of field: sockaddr_in6::sin6_flowinfo"]
		[::std::mem::offset_of!(sockaddr_in6, sin6_flowinfo) - 4usize];
	["Offset of field: sockaddr_in6::sin6_addr"]
		[::std::mem::offset_of!(sockaddr_in6, sin6_addr) - 8usize];
	["Offset of field: sockaddr_in6::sin6_scope_id"]
		[::std::mem::offset_of!(sockaddr_in6, sin6_scope_id) - 24usize];
};
pub type sctp_assoc_t = u32;
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_common_header {
	pub source_port: u16,
	pub destination_port: u16,
	pub verification_tag: u32,
	pub crc32c: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_common_header"][::std::mem::size_of::<sctp_common_header>() - 12usize];
	["Alignment of sctp_common_header"][::std::mem::align_of::<sctp_common_header>() - 1usize];
	["Offset of field: sctp_common_header::source_port"]
		[::std::mem::offset_of!(sctp_common_header, source_port) - 0usize];
	["Offset of field: sctp_common_header::destination_port"]
		[::std::mem::offset_of!(sctp_common_header, destination_port) - 2usize];
	["Offset of field: sctp_common_header::verification_tag"]
		[::std::mem::offset_of!(sctp_common_header, verification_tag) - 4usize];
	["Offset of field: sctp_common_header::crc32c"]
		[::std::mem::offset_of!(sctp_common_header, crc32c) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_conn {
	pub sconn_len: u8,
	pub sconn_family: u8,
	pub sconn_port: u16,
	pub sconn_addr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sockaddr_conn"][::std::mem::size_of::<sockaddr_conn>() - 16usize];
	["Alignment of sockaddr_conn"][::std::mem::align_of::<sockaddr_conn>() - 8usize];
	["Offset of field: sockaddr_conn::sconn_len"]
		[::std::mem::offset_of!(sockaddr_conn, sconn_len) - 0usize];
	["Offset of field: sockaddr_conn::sconn_family"]
		[::std::mem::offset_of!(sockaddr_conn, sconn_family) - 1usize];
	["Offset of field: sockaddr_conn::sconn_port"]
		[::std::mem::offset_of!(sockaddr_conn, sconn_port) - 2usize];
	["Offset of field: sockaddr_conn::sconn_addr"]
		[::std::mem::offset_of!(sockaddr_conn, sconn_addr) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union sctp_sockstore {
	pub sin: sockaddr_in,
	pub sin6: sockaddr_in6,
	pub sconn: sockaddr_conn,
	pub sa: sockaddr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_sockstore"][::std::mem::size_of::<sctp_sockstore>() - 32usize];
	["Alignment of sctp_sockstore"][::std::mem::align_of::<sctp_sockstore>() - 8usize];
	["Offset of field: sctp_sockstore::sin"][::std::mem::offset_of!(sctp_sockstore, sin) - 0usize];
	["Offset of field: sctp_sockstore::sin6"]
		[::std::mem::offset_of!(sctp_sockstore, sin6) - 0usize];
	["Offset of field: sctp_sockstore::sconn"]
		[::std::mem::offset_of!(sctp_sockstore, sconn) - 0usize];
	["Offset of field: sctp_sockstore::sa"][::std::mem::offset_of!(sctp_sockstore, sa) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_rcvinfo {
	pub rcv_sid: u16,
	pub rcv_ssn: u16,
	pub rcv_flags: u16,
	pub rcv_ppid: u32,
	pub rcv_tsn: u32,
	pub rcv_cumtsn: u32,
	pub rcv_context: u32,
	pub rcv_assoc_id: sctp_assoc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_rcvinfo"][::std::mem::size_of::<sctp_rcvinfo>() - 28usize];
	["Alignment of sctp_rcvinfo"][::std::mem::align_of::<sctp_rcvinfo>() - 4usize];
	["Offset of field: sctp_rcvinfo::rcv_sid"]
		[::std::mem::offset_of!(sctp_rcvinfo, rcv_sid) - 0usize];
	["Offset of field: sctp_rcvinfo::rcv_ssn"]
		[::std::mem::offset_of!(sctp_rcvinfo, rcv_ssn) - 2usize];
	["Offset of field: sctp_rcvinfo::rcv_flags"]
		[::std::mem::offset_of!(sctp_rcvinfo, rcv_flags) - 4usize];
	["Offset of field: sctp_rcvinfo::rcv_ppid"]
		[::std::mem::offset_of!(sctp_rcvinfo, rcv_ppid) - 8usize];
	["Offset of field: sctp_rcvinfo::rcv_tsn"]
		[::std::mem::offset_of!(sctp_rcvinfo, rcv_tsn) - 12usize];
	["Offset of field: sctp_rcvinfo::rcv_cumtsn"]
		[::std::mem::offset_of!(sctp_rcvinfo, rcv_cumtsn) - 16usize];
	["Offset of field: sctp_rcvinfo::rcv_context"]
		[::std::mem::offset_of!(sctp_rcvinfo, rcv_context) - 20usize];
	["Offset of field: sctp_rcvinfo::rcv_assoc_id"]
		[::std::mem::offset_of!(sctp_rcvinfo, rcv_assoc_id) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_nxtinfo {
	pub nxt_sid: u16,
	pub nxt_flags: u16,
	pub nxt_ppid: u32,
	pub nxt_length: u32,
	pub nxt_assoc_id: sctp_assoc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_nxtinfo"][::std::mem::size_of::<sctp_nxtinfo>() - 16usize];
	["Alignment of sctp_nxtinfo"][::std::mem::align_of::<sctp_nxtinfo>() - 4usize];
	["Offset of field: sctp_nxtinfo::nxt_sid"]
		[::std::mem::offset_of!(sctp_nxtinfo, nxt_sid) - 0usize];
	["Offset of field: sctp_nxtinfo::nxt_flags"]
		[::std::mem::offset_of!(sctp_nxtinfo, nxt_flags) - 2usize];
	["Offset of field: sctp_nxtinfo::nxt_ppid"]
		[::std::mem::offset_of!(sctp_nxtinfo, nxt_ppid) - 4usize];
	["Offset of field: sctp_nxtinfo::nxt_length"]
		[::std::mem::offset_of!(sctp_nxtinfo, nxt_length) - 8usize];
	["Offset of field: sctp_nxtinfo::nxt_assoc_id"]
		[::std::mem::offset_of!(sctp_nxtinfo, nxt_assoc_id) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_recvv_rn {
	pub recvv_rcvinfo: sctp_rcvinfo,
	pub recvv_nxtinfo: sctp_nxtinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_recvv_rn"][::std::mem::size_of::<sctp_recvv_rn>() - 44usize];
	["Alignment of sctp_recvv_rn"][::std::mem::align_of::<sctp_recvv_rn>() - 4usize];
	["Offset of field: sctp_recvv_rn::recvv_rcvinfo"]
		[::std::mem::offset_of!(sctp_recvv_rn, recvv_rcvinfo) - 0usize];
	["Offset of field: sctp_recvv_rn::recvv_nxtinfo"]
		[::std::mem::offset_of!(sctp_recvv_rn, recvv_nxtinfo) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_snd_all_completes {
	pub sall_stream: u16,
	pub sall_flags: u16,
	pub sall_ppid: u32,
	pub sall_context: u32,
	pub sall_num_sent: u32,
	pub sall_num_failed: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_snd_all_completes"][::std::mem::size_of::<sctp_snd_all_completes>() - 20usize];
	["Alignment of sctp_snd_all_completes"]
		[::std::mem::align_of::<sctp_snd_all_completes>() - 4usize];
	["Offset of field: sctp_snd_all_completes::sall_stream"]
		[::std::mem::offset_of!(sctp_snd_all_completes, sall_stream) - 0usize];
	["Offset of field: sctp_snd_all_completes::sall_flags"]
		[::std::mem::offset_of!(sctp_snd_all_completes, sall_flags) - 2usize];
	["Offset of field: sctp_snd_all_completes::sall_ppid"]
		[::std::mem::offset_of!(sctp_snd_all_completes, sall_ppid) - 4usize];
	["Offset of field: sctp_snd_all_completes::sall_context"]
		[::std::mem::offset_of!(sctp_snd_all_completes, sall_context) - 8usize];
	["Offset of field: sctp_snd_all_completes::sall_num_sent"]
		[::std::mem::offset_of!(sctp_snd_all_completes, sall_num_sent) - 12usize];
	["Offset of field: sctp_snd_all_completes::sall_num_failed"]
		[::std::mem::offset_of!(sctp_snd_all_completes, sall_num_failed) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_sndinfo {
	pub snd_sid: u16,
	pub snd_flags: u16,
	pub snd_ppid: u32,
	pub snd_context: u32,
	pub snd_assoc_id: sctp_assoc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_sndinfo"][::std::mem::size_of::<sctp_sndinfo>() - 16usize];
	["Alignment of sctp_sndinfo"][::std::mem::align_of::<sctp_sndinfo>() - 4usize];
	["Offset of field: sctp_sndinfo::snd_sid"]
		[::std::mem::offset_of!(sctp_sndinfo, snd_sid) - 0usize];
	["Offset of field: sctp_sndinfo::snd_flags"]
		[::std::mem::offset_of!(sctp_sndinfo, snd_flags) - 2usize];
	["Offset of field: sctp_sndinfo::snd_ppid"]
		[::std::mem::offset_of!(sctp_sndinfo, snd_ppid) - 4usize];
	["Offset of field: sctp_sndinfo::snd_context"]
		[::std::mem::offset_of!(sctp_sndinfo, snd_context) - 8usize];
	["Offset of field: sctp_sndinfo::snd_assoc_id"]
		[::std::mem::offset_of!(sctp_sndinfo, snd_assoc_id) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_prinfo {
	pub pr_policy: u16,
	pub pr_value: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_prinfo"][::std::mem::size_of::<sctp_prinfo>() - 8usize];
	["Alignment of sctp_prinfo"][::std::mem::align_of::<sctp_prinfo>() - 4usize];
	["Offset of field: sctp_prinfo::pr_policy"]
		[::std::mem::offset_of!(sctp_prinfo, pr_policy) - 0usize];
	["Offset of field: sctp_prinfo::pr_value"]
		[::std::mem::offset_of!(sctp_prinfo, pr_value) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_authinfo {
	pub auth_keynumber: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_authinfo"][::std::mem::size_of::<sctp_authinfo>() - 2usize];
	["Alignment of sctp_authinfo"][::std::mem::align_of::<sctp_authinfo>() - 2usize];
	["Offset of field: sctp_authinfo::auth_keynumber"]
		[::std::mem::offset_of!(sctp_authinfo, auth_keynumber) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_sendv_spa {
	pub sendv_flags: u32,
	pub sendv_sndinfo: sctp_sndinfo,
	pub sendv_prinfo: sctp_prinfo,
	pub sendv_authinfo: sctp_authinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_sendv_spa"][::std::mem::size_of::<sctp_sendv_spa>() - 32usize];
	["Alignment of sctp_sendv_spa"][::std::mem::align_of::<sctp_sendv_spa>() - 4usize];
	["Offset of field: sctp_sendv_spa::sendv_flags"]
		[::std::mem::offset_of!(sctp_sendv_spa, sendv_flags) - 0usize];
	["Offset of field: sctp_sendv_spa::sendv_sndinfo"]
		[::std::mem::offset_of!(sctp_sendv_spa, sendv_sndinfo) - 4usize];
	["Offset of field: sctp_sendv_spa::sendv_prinfo"]
		[::std::mem::offset_of!(sctp_sendv_spa, sendv_prinfo) - 20usize];
	["Offset of field: sctp_sendv_spa::sendv_authinfo"]
		[::std::mem::offset_of!(sctp_sendv_spa, sendv_authinfo) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_udpencaps {
	pub sue_address: sockaddr_storage,
	pub sue_assoc_id: u32,
	pub sue_port: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_udpencaps"][::std::mem::size_of::<sctp_udpencaps>() - 136usize];
	["Alignment of sctp_udpencaps"][::std::mem::align_of::<sctp_udpencaps>() - 8usize];
	["Offset of field: sctp_udpencaps::sue_address"]
		[::std::mem::offset_of!(sctp_udpencaps, sue_address) - 0usize];
	["Offset of field: sctp_udpencaps::sue_assoc_id"]
		[::std::mem::offset_of!(sctp_udpencaps, sue_assoc_id) - 128usize];
	["Offset of field: sctp_udpencaps::sue_port"]
		[::std::mem::offset_of!(sctp_udpencaps, sue_port) - 132usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct sctp_assoc_change {
	pub sac_type: u16,
	pub sac_flags: u16,
	pub sac_length: u32,
	pub sac_state: u16,
	pub sac_error: u16,
	pub sac_outbound_streams: u16,
	pub sac_inbound_streams: u16,
	pub sac_assoc_id: sctp_assoc_t,
	pub sac_info: __IncompleteArrayField<u8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_assoc_change"][::std::mem::size_of::<sctp_assoc_change>() - 20usize];
	["Alignment of sctp_assoc_change"][::std::mem::align_of::<sctp_assoc_change>() - 4usize];
	["Offset of field: sctp_assoc_change::sac_type"]
		[::std::mem::offset_of!(sctp_assoc_change, sac_type) - 0usize];
	["Offset of field: sctp_assoc_change::sac_flags"]
		[::std::mem::offset_of!(sctp_assoc_change, sac_flags) - 2usize];
	["Offset of field: sctp_assoc_change::sac_length"]
		[::std::mem::offset_of!(sctp_assoc_change, sac_length) - 4usize];
	["Offset of field: sctp_assoc_change::sac_state"]
		[::std::mem::offset_of!(sctp_assoc_change, sac_state) - 8usize];
	["Offset of field: sctp_assoc_change::sac_error"]
		[::std::mem::offset_of!(sctp_assoc_change, sac_error) - 10usize];
	["Offset of field: sctp_assoc_change::sac_outbound_streams"]
		[::std::mem::offset_of!(sctp_assoc_change, sac_outbound_streams) - 12usize];
	["Offset of field: sctp_assoc_change::sac_inbound_streams"]
		[::std::mem::offset_of!(sctp_assoc_change, sac_inbound_streams) - 14usize];
	["Offset of field: sctp_assoc_change::sac_assoc_id"]
		[::std::mem::offset_of!(sctp_assoc_change, sac_assoc_id) - 16usize];
	["Offset of field: sctp_assoc_change::sac_info"]
		[::std::mem::offset_of!(sctp_assoc_change, sac_info) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_paddr_change {
	pub spc_type: u16,
	pub spc_flags: u16,
	pub spc_length: u32,
	pub spc_aaddr: sockaddr_storage,
	pub spc_state: u32,
	pub spc_error: u32,
	pub spc_assoc_id: sctp_assoc_t,
	pub spc_padding: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_paddr_change"][::std::mem::size_of::<sctp_paddr_change>() - 152usize];
	["Alignment of sctp_paddr_change"][::std::mem::align_of::<sctp_paddr_change>() - 8usize];
	["Offset of field: sctp_paddr_change::spc_type"]
		[::std::mem::offset_of!(sctp_paddr_change, spc_type) - 0usize];
	["Offset of field: sctp_paddr_change::spc_flags"]
		[::std::mem::offset_of!(sctp_paddr_change, spc_flags) - 2usize];
	["Offset of field: sctp_paddr_change::spc_length"]
		[::std::mem::offset_of!(sctp_paddr_change, spc_length) - 4usize];
	["Offset of field: sctp_paddr_change::spc_aaddr"]
		[::std::mem::offset_of!(sctp_paddr_change, spc_aaddr) - 8usize];
	["Offset of field: sctp_paddr_change::spc_state"]
		[::std::mem::offset_of!(sctp_paddr_change, spc_state) - 136usize];
	["Offset of field: sctp_paddr_change::spc_error"]
		[::std::mem::offset_of!(sctp_paddr_change, spc_error) - 140usize];
	["Offset of field: sctp_paddr_change::spc_assoc_id"]
		[::std::mem::offset_of!(sctp_paddr_change, spc_assoc_id) - 144usize];
	["Offset of field: sctp_paddr_change::spc_padding"]
		[::std::mem::offset_of!(sctp_paddr_change, spc_padding) - 148usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct sctp_remote_error {
	pub sre_type: u16,
	pub sre_flags: u16,
	pub sre_length: u32,
	pub sre_error: u16,
	pub sre_assoc_id: sctp_assoc_t,
	pub sre_data: __IncompleteArrayField<u8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_remote_error"][::std::mem::size_of::<sctp_remote_error>() - 16usize];
	["Alignment of sctp_remote_error"][::std::mem::align_of::<sctp_remote_error>() - 4usize];
	["Offset of field: sctp_remote_error::sre_type"]
		[::std::mem::offset_of!(sctp_remote_error, sre_type) - 0usize];
	["Offset of field: sctp_remote_error::sre_flags"]
		[::std::mem::offset_of!(sctp_remote_error, sre_flags) - 2usize];
	["Offset of field: sctp_remote_error::sre_length"]
		[::std::mem::offset_of!(sctp_remote_error, sre_length) - 4usize];
	["Offset of field: sctp_remote_error::sre_error"]
		[::std::mem::offset_of!(sctp_remote_error, sre_error) - 8usize];
	["Offset of field: sctp_remote_error::sre_assoc_id"]
		[::std::mem::offset_of!(sctp_remote_error, sre_assoc_id) - 12usize];
	["Offset of field: sctp_remote_error::sre_data"]
		[::std::mem::offset_of!(sctp_remote_error, sre_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_shutdown_event {
	pub sse_type: u16,
	pub sse_flags: u16,
	pub sse_length: u32,
	pub sse_assoc_id: sctp_assoc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_shutdown_event"][::std::mem::size_of::<sctp_shutdown_event>() - 12usize];
	["Alignment of sctp_shutdown_event"][::std::mem::align_of::<sctp_shutdown_event>() - 4usize];
	["Offset of field: sctp_shutdown_event::sse_type"]
		[::std::mem::offset_of!(sctp_shutdown_event, sse_type) - 0usize];
	["Offset of field: sctp_shutdown_event::sse_flags"]
		[::std::mem::offset_of!(sctp_shutdown_event, sse_flags) - 2usize];
	["Offset of field: sctp_shutdown_event::sse_length"]
		[::std::mem::offset_of!(sctp_shutdown_event, sse_length) - 4usize];
	["Offset of field: sctp_shutdown_event::sse_assoc_id"]
		[::std::mem::offset_of!(sctp_shutdown_event, sse_assoc_id) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_adaptation_event {
	pub sai_type: u16,
	pub sai_flags: u16,
	pub sai_length: u32,
	pub sai_adaptation_ind: u32,
	pub sai_assoc_id: sctp_assoc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_adaptation_event"][::std::mem::size_of::<sctp_adaptation_event>() - 16usize];
	["Alignment of sctp_adaptation_event"]
		[::std::mem::align_of::<sctp_adaptation_event>() - 4usize];
	["Offset of field: sctp_adaptation_event::sai_type"]
		[::std::mem::offset_of!(sctp_adaptation_event, sai_type) - 0usize];
	["Offset of field: sctp_adaptation_event::sai_flags"]
		[::std::mem::offset_of!(sctp_adaptation_event, sai_flags) - 2usize];
	["Offset of field: sctp_adaptation_event::sai_length"]
		[::std::mem::offset_of!(sctp_adaptation_event, sai_length) - 4usize];
	["Offset of field: sctp_adaptation_event::sai_adaptation_ind"]
		[::std::mem::offset_of!(sctp_adaptation_event, sai_adaptation_ind) - 8usize];
	["Offset of field: sctp_adaptation_event::sai_assoc_id"]
		[::std::mem::offset_of!(sctp_adaptation_event, sai_assoc_id) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_pdapi_event {
	pub pdapi_type: u16,
	pub pdapi_flags: u16,
	pub pdapi_length: u32,
	pub pdapi_indication: u32,
	pub pdapi_stream: u32,
	pub pdapi_seq: u32,
	pub pdapi_assoc_id: sctp_assoc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_pdapi_event"][::std::mem::size_of::<sctp_pdapi_event>() - 24usize];
	["Alignment of sctp_pdapi_event"][::std::mem::align_of::<sctp_pdapi_event>() - 4usize];
	["Offset of field: sctp_pdapi_event::pdapi_type"]
		[::std::mem::offset_of!(sctp_pdapi_event, pdapi_type) - 0usize];
	["Offset of field: sctp_pdapi_event::pdapi_flags"]
		[::std::mem::offset_of!(sctp_pdapi_event, pdapi_flags) - 2usize];
	["Offset of field: sctp_pdapi_event::pdapi_length"]
		[::std::mem::offset_of!(sctp_pdapi_event, pdapi_length) - 4usize];
	["Offset of field: sctp_pdapi_event::pdapi_indication"]
		[::std::mem::offset_of!(sctp_pdapi_event, pdapi_indication) - 8usize];
	["Offset of field: sctp_pdapi_event::pdapi_stream"]
		[::std::mem::offset_of!(sctp_pdapi_event, pdapi_stream) - 12usize];
	["Offset of field: sctp_pdapi_event::pdapi_seq"]
		[::std::mem::offset_of!(sctp_pdapi_event, pdapi_seq) - 16usize];
	["Offset of field: sctp_pdapi_event::pdapi_assoc_id"]
		[::std::mem::offset_of!(sctp_pdapi_event, pdapi_assoc_id) - 20usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_authkey_event {
	pub auth_type: u16,
	pub auth_flags: u16,
	pub auth_length: u32,
	pub auth_keynumber: u16,
	pub auth_indication: u32,
	pub auth_assoc_id: sctp_assoc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_authkey_event"][::std::mem::size_of::<sctp_authkey_event>() - 20usize];
	["Alignment of sctp_authkey_event"][::std::mem::align_of::<sctp_authkey_event>() - 4usize];
	["Offset of field: sctp_authkey_event::auth_type"]
		[::std::mem::offset_of!(sctp_authkey_event, auth_type) - 0usize];
	["Offset of field: sctp_authkey_event::auth_flags"]
		[::std::mem::offset_of!(sctp_authkey_event, auth_flags) - 2usize];
	["Offset of field: sctp_authkey_event::auth_length"]
		[::std::mem::offset_of!(sctp_authkey_event, auth_length) - 4usize];
	["Offset of field: sctp_authkey_event::auth_keynumber"]
		[::std::mem::offset_of!(sctp_authkey_event, auth_keynumber) - 8usize];
	["Offset of field: sctp_authkey_event::auth_indication"]
		[::std::mem::offset_of!(sctp_authkey_event, auth_indication) - 12usize];
	["Offset of field: sctp_authkey_event::auth_assoc_id"]
		[::std::mem::offset_of!(sctp_authkey_event, auth_assoc_id) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_sender_dry_event {
	pub sender_dry_type: u16,
	pub sender_dry_flags: u16,
	pub sender_dry_length: u32,
	pub sender_dry_assoc_id: sctp_assoc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_sender_dry_event"][::std::mem::size_of::<sctp_sender_dry_event>() - 12usize];
	["Alignment of sctp_sender_dry_event"]
		[::std::mem::align_of::<sctp_sender_dry_event>() - 4usize];
	["Offset of field: sctp_sender_dry_event::sender_dry_type"]
		[::std::mem::offset_of!(sctp_sender_dry_event, sender_dry_type) - 0usize];
	["Offset of field: sctp_sender_dry_event::sender_dry_flags"]
		[::std::mem::offset_of!(sctp_sender_dry_event, sender_dry_flags) - 2usize];
	["Offset of field: sctp_sender_dry_event::sender_dry_length"]
		[::std::mem::offset_of!(sctp_sender_dry_event, sender_dry_length) - 4usize];
	["Offset of field: sctp_sender_dry_event::sender_dry_assoc_id"]
		[::std::mem::offset_of!(sctp_sender_dry_event, sender_dry_assoc_id) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct sctp_stream_reset_event {
	pub strreset_type: u16,
	pub strreset_flags: u16,
	pub strreset_length: u32,
	pub strreset_assoc_id: sctp_assoc_t,
	pub strreset_stream_list: __IncompleteArrayField<u16>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_stream_reset_event"][::std::mem::size_of::<sctp_stream_reset_event>() - 12usize];
	["Alignment of sctp_stream_reset_event"]
		[::std::mem::align_of::<sctp_stream_reset_event>() - 4usize];
	["Offset of field: sctp_stream_reset_event::strreset_type"]
		[::std::mem::offset_of!(sctp_stream_reset_event, strreset_type) - 0usize];
	["Offset of field: sctp_stream_reset_event::strreset_flags"]
		[::std::mem::offset_of!(sctp_stream_reset_event, strreset_flags) - 2usize];
	["Offset of field: sctp_stream_reset_event::strreset_length"]
		[::std::mem::offset_of!(sctp_stream_reset_event, strreset_length) - 4usize];
	["Offset of field: sctp_stream_reset_event::strreset_assoc_id"]
		[::std::mem::offset_of!(sctp_stream_reset_event, strreset_assoc_id) - 8usize];
	["Offset of field: sctp_stream_reset_event::strreset_stream_list"]
		[::std::mem::offset_of!(sctp_stream_reset_event, strreset_stream_list) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_assoc_reset_event {
	pub assocreset_type: u16,
	pub assocreset_flags: u16,
	pub assocreset_length: u32,
	pub assocreset_assoc_id: sctp_assoc_t,
	pub assocreset_local_tsn: u32,
	pub assocreset_remote_tsn: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_assoc_reset_event"][::std::mem::size_of::<sctp_assoc_reset_event>() - 20usize];
	["Alignment of sctp_assoc_reset_event"]
		[::std::mem::align_of::<sctp_assoc_reset_event>() - 4usize];
	["Offset of field: sctp_assoc_reset_event::assocreset_type"]
		[::std::mem::offset_of!(sctp_assoc_reset_event, assocreset_type) - 0usize];
	["Offset of field: sctp_assoc_reset_event::assocreset_flags"]
		[::std::mem::offset_of!(sctp_assoc_reset_event, assocreset_flags) - 2usize];
	["Offset of field: sctp_assoc_reset_event::assocreset_length"]
		[::std::mem::offset_of!(sctp_assoc_reset_event, assocreset_length) - 4usize];
	["Offset of field: sctp_assoc_reset_event::assocreset_assoc_id"]
		[::std::mem::offset_of!(sctp_assoc_reset_event, assocreset_assoc_id) - 8usize];
	["Offset of field: sctp_assoc_reset_event::assocreset_local_tsn"]
		[::std::mem::offset_of!(sctp_assoc_reset_event, assocreset_local_tsn) - 12usize];
	["Offset of field: sctp_assoc_reset_event::assocreset_remote_tsn"]
		[::std::mem::offset_of!(sctp_assoc_reset_event, assocreset_remote_tsn) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_stream_change_event {
	pub strchange_type: u16,
	pub strchange_flags: u16,
	pub strchange_length: u32,
	pub strchange_assoc_id: sctp_assoc_t,
	pub strchange_instrms: u16,
	pub strchange_outstrms: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_stream_change_event"]
		[::std::mem::size_of::<sctp_stream_change_event>() - 16usize];
	["Alignment of sctp_stream_change_event"]
		[::std::mem::align_of::<sctp_stream_change_event>() - 4usize];
	["Offset of field: sctp_stream_change_event::strchange_type"]
		[::std::mem::offset_of!(sctp_stream_change_event, strchange_type) - 0usize];
	["Offset of field: sctp_stream_change_event::strchange_flags"]
		[::std::mem::offset_of!(sctp_stream_change_event, strchange_flags) - 2usize];
	["Offset of field: sctp_stream_change_event::strchange_length"]
		[::std::mem::offset_of!(sctp_stream_change_event, strchange_length) - 4usize];
	["Offset of field: sctp_stream_change_event::strchange_assoc_id"]
		[::std::mem::offset_of!(sctp_stream_change_event, strchange_assoc_id) - 8usize];
	["Offset of field: sctp_stream_change_event::strchange_instrms"]
		[::std::mem::offset_of!(sctp_stream_change_event, strchange_instrms) - 12usize];
	["Offset of field: sctp_stream_change_event::strchange_outstrms"]
		[::std::mem::offset_of!(sctp_stream_change_event, strchange_outstrms) - 14usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct sctp_send_failed_event {
	pub ssfe_type: u16,
	pub ssfe_flags: u16,
	pub ssfe_length: u32,
	pub ssfe_error: u32,
	pub ssfe_info: sctp_sndinfo,
	pub ssfe_assoc_id: sctp_assoc_t,
	pub ssfe_data: __IncompleteArrayField<u8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_send_failed_event"][::std::mem::size_of::<sctp_send_failed_event>() - 32usize];
	["Alignment of sctp_send_failed_event"]
		[::std::mem::align_of::<sctp_send_failed_event>() - 4usize];
	["Offset of field: sctp_send_failed_event::ssfe_type"]
		[::std::mem::offset_of!(sctp_send_failed_event, ssfe_type) - 0usize];
	["Offset of field: sctp_send_failed_event::ssfe_flags"]
		[::std::mem::offset_of!(sctp_send_failed_event, ssfe_flags) - 2usize];
	["Offset of field: sctp_send_failed_event::ssfe_length"]
		[::std::mem::offset_of!(sctp_send_failed_event, ssfe_length) - 4usize];
	["Offset of field: sctp_send_failed_event::ssfe_error"]
		[::std::mem::offset_of!(sctp_send_failed_event, ssfe_error) - 8usize];
	["Offset of field: sctp_send_failed_event::ssfe_info"]
		[::std::mem::offset_of!(sctp_send_failed_event, ssfe_info) - 12usize];
	["Offset of field: sctp_send_failed_event::ssfe_assoc_id"]
		[::std::mem::offset_of!(sctp_send_failed_event, ssfe_assoc_id) - 28usize];
	["Offset of field: sctp_send_failed_event::ssfe_data"]
		[::std::mem::offset_of!(sctp_send_failed_event, ssfe_data) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_event {
	pub se_assoc_id: sctp_assoc_t,
	pub se_type: u16,
	pub se_on: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_event"][::std::mem::size_of::<sctp_event>() - 8usize];
	["Alignment of sctp_event"][::std::mem::align_of::<sctp_event>() - 4usize];
	["Offset of field: sctp_event::se_assoc_id"]
		[::std::mem::offset_of!(sctp_event, se_assoc_id) - 0usize];
	["Offset of field: sctp_event::se_type"][::std::mem::offset_of!(sctp_event, se_type) - 4usize];
	["Offset of field: sctp_event::se_on"][::std::mem::offset_of!(sctp_event, se_on) - 6usize];
};
#[repr(C)]
pub struct sctp_notification {
	pub sn_header: __BindgenUnionField<sctp_notification_sctp_tlv>,
	pub sn_assoc_change: __BindgenUnionField<sctp_assoc_change>,
	pub sn_paddr_change: __BindgenUnionField<sctp_paddr_change>,
	pub sn_remote_error: __BindgenUnionField<sctp_remote_error>,
	pub sn_shutdown_event: __BindgenUnionField<sctp_shutdown_event>,
	pub sn_adaptation_event: __BindgenUnionField<sctp_adaptation_event>,
	pub sn_pdapi_event: __BindgenUnionField<sctp_pdapi_event>,
	pub sn_auth_event: __BindgenUnionField<sctp_authkey_event>,
	pub sn_sender_dry_event: __BindgenUnionField<sctp_sender_dry_event>,
	pub sn_send_failed_event: __BindgenUnionField<sctp_send_failed_event>,
	pub sn_strreset_event: __BindgenUnionField<sctp_stream_reset_event>,
	pub sn_assocreset_event: __BindgenUnionField<sctp_assoc_reset_event>,
	pub sn_strchange_event: __BindgenUnionField<sctp_stream_change_event>,
	pub bindgen_union_field: [u64; 19usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_notification_sctp_tlv {
	pub sn_type: u16,
	pub sn_flags: u16,
	pub sn_length: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_notification_sctp_tlv"]
		[::std::mem::size_of::<sctp_notification_sctp_tlv>() - 8usize];
	["Alignment of sctp_notification_sctp_tlv"]
		[::std::mem::align_of::<sctp_notification_sctp_tlv>() - 4usize];
	["Offset of field: sctp_notification_sctp_tlv::sn_type"]
		[::std::mem::offset_of!(sctp_notification_sctp_tlv, sn_type) - 0usize];
	["Offset of field: sctp_notification_sctp_tlv::sn_flags"]
		[::std::mem::offset_of!(sctp_notification_sctp_tlv, sn_flags) - 2usize];
	["Offset of field: sctp_notification_sctp_tlv::sn_length"]
		[::std::mem::offset_of!(sctp_notification_sctp_tlv, sn_length) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_notification"][::std::mem::size_of::<sctp_notification>() - 152usize];
	["Alignment of sctp_notification"][::std::mem::align_of::<sctp_notification>() - 8usize];
	["Offset of field: sctp_notification::sn_header"]
		[::std::mem::offset_of!(sctp_notification, sn_header) - 0usize];
	["Offset of field: sctp_notification::sn_assoc_change"]
		[::std::mem::offset_of!(sctp_notification, sn_assoc_change) - 0usize];
	["Offset of field: sctp_notification::sn_paddr_change"]
		[::std::mem::offset_of!(sctp_notification, sn_paddr_change) - 0usize];
	["Offset of field: sctp_notification::sn_remote_error"]
		[::std::mem::offset_of!(sctp_notification, sn_remote_error) - 0usize];
	["Offset of field: sctp_notification::sn_shutdown_event"]
		[::std::mem::offset_of!(sctp_notification, sn_shutdown_event) - 0usize];
	["Offset of field: sctp_notification::sn_adaptation_event"]
		[::std::mem::offset_of!(sctp_notification, sn_adaptation_event) - 0usize];
	["Offset of field: sctp_notification::sn_pdapi_event"]
		[::std::mem::offset_of!(sctp_notification, sn_pdapi_event) - 0usize];
	["Offset of field: sctp_notification::sn_auth_event"]
		[::std::mem::offset_of!(sctp_notification, sn_auth_event) - 0usize];
	["Offset of field: sctp_notification::sn_sender_dry_event"]
		[::std::mem::offset_of!(sctp_notification, sn_sender_dry_event) - 0usize];
	["Offset of field: sctp_notification::sn_send_failed_event"]
		[::std::mem::offset_of!(sctp_notification, sn_send_failed_event) - 0usize];
	["Offset of field: sctp_notification::sn_strreset_event"]
		[::std::mem::offset_of!(sctp_notification, sn_strreset_event) - 0usize];
	["Offset of field: sctp_notification::sn_assocreset_event"]
		[::std::mem::offset_of!(sctp_notification, sn_assocreset_event) - 0usize];
	["Offset of field: sctp_notification::sn_strchange_event"]
		[::std::mem::offset_of!(sctp_notification, sn_strchange_event) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_event_subscribe {
	pub sctp_data_io_event: u8,
	pub sctp_association_event: u8,
	pub sctp_address_event: u8,
	pub sctp_send_failure_event: u8,
	pub sctp_peer_error_event: u8,
	pub sctp_shutdown_event: u8,
	pub sctp_partial_delivery_event: u8,
	pub sctp_adaptation_layer_event: u8,
	pub sctp_authentication_event: u8,
	pub sctp_sender_dry_event: u8,
	pub sctp_stream_reset_event: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_event_subscribe"][::std::mem::size_of::<sctp_event_subscribe>() - 11usize];
	["Alignment of sctp_event_subscribe"][::std::mem::align_of::<sctp_event_subscribe>() - 1usize];
	["Offset of field: sctp_event_subscribe::sctp_data_io_event"]
		[::std::mem::offset_of!(sctp_event_subscribe, sctp_data_io_event) - 0usize];
	["Offset of field: sctp_event_subscribe::sctp_association_event"]
		[::std::mem::offset_of!(sctp_event_subscribe, sctp_association_event) - 1usize];
	["Offset of field: sctp_event_subscribe::sctp_address_event"]
		[::std::mem::offset_of!(sctp_event_subscribe, sctp_address_event) - 2usize];
	["Offset of field: sctp_event_subscribe::sctp_send_failure_event"]
		[::std::mem::offset_of!(sctp_event_subscribe, sctp_send_failure_event) - 3usize];
	["Offset of field: sctp_event_subscribe::sctp_peer_error_event"]
		[::std::mem::offset_of!(sctp_event_subscribe, sctp_peer_error_event) - 4usize];
	["Offset of field: sctp_event_subscribe::sctp_shutdown_event"]
		[::std::mem::offset_of!(sctp_event_subscribe, sctp_shutdown_event) - 5usize];
	["Offset of field: sctp_event_subscribe::sctp_partial_delivery_event"]
		[::std::mem::offset_of!(sctp_event_subscribe, sctp_partial_delivery_event) - 6usize];
	["Offset of field: sctp_event_subscribe::sctp_adaptation_layer_event"]
		[::std::mem::offset_of!(sctp_event_subscribe, sctp_adaptation_layer_event) - 7usize];
	["Offset of field: sctp_event_subscribe::sctp_authentication_event"]
		[::std::mem::offset_of!(sctp_event_subscribe, sctp_authentication_event) - 8usize];
	["Offset of field: sctp_event_subscribe::sctp_sender_dry_event"]
		[::std::mem::offset_of!(sctp_event_subscribe, sctp_sender_dry_event) - 9usize];
	["Offset of field: sctp_event_subscribe::sctp_stream_reset_event"]
		[::std::mem::offset_of!(sctp_event_subscribe, sctp_stream_reset_event) - 10usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_initmsg {
	pub sinit_num_ostreams: u16,
	pub sinit_max_instreams: u16,
	pub sinit_max_attempts: u16,
	pub sinit_max_init_timeo: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_initmsg"][::std::mem::size_of::<sctp_initmsg>() - 8usize];
	["Alignment of sctp_initmsg"][::std::mem::align_of::<sctp_initmsg>() - 2usize];
	["Offset of field: sctp_initmsg::sinit_num_ostreams"]
		[::std::mem::offset_of!(sctp_initmsg, sinit_num_ostreams) - 0usize];
	["Offset of field: sctp_initmsg::sinit_max_instreams"]
		[::std::mem::offset_of!(sctp_initmsg, sinit_max_instreams) - 2usize];
	["Offset of field: sctp_initmsg::sinit_max_attempts"]
		[::std::mem::offset_of!(sctp_initmsg, sinit_max_attempts) - 4usize];
	["Offset of field: sctp_initmsg::sinit_max_init_timeo"]
		[::std::mem::offset_of!(sctp_initmsg, sinit_max_init_timeo) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_rtoinfo {
	pub srto_assoc_id: sctp_assoc_t,
	pub srto_initial: u32,
	pub srto_max: u32,
	pub srto_min: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_rtoinfo"][::std::mem::size_of::<sctp_rtoinfo>() - 16usize];
	["Alignment of sctp_rtoinfo"][::std::mem::align_of::<sctp_rtoinfo>() - 4usize];
	["Offset of field: sctp_rtoinfo::srto_assoc_id"]
		[::std::mem::offset_of!(sctp_rtoinfo, srto_assoc_id) - 0usize];
	["Offset of field: sctp_rtoinfo::srto_initial"]
		[::std::mem::offset_of!(sctp_rtoinfo, srto_initial) - 4usize];
	["Offset of field: sctp_rtoinfo::srto_max"]
		[::std::mem::offset_of!(sctp_rtoinfo, srto_max) - 8usize];
	["Offset of field: sctp_rtoinfo::srto_min"]
		[::std::mem::offset_of!(sctp_rtoinfo, srto_min) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_assocparams {
	pub sasoc_assoc_id: sctp_assoc_t,
	pub sasoc_peer_rwnd: u32,
	pub sasoc_local_rwnd: u32,
	pub sasoc_cookie_life: u32,
	pub sasoc_asocmaxrxt: u16,
	pub sasoc_number_peer_destinations: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_assocparams"][::std::mem::size_of::<sctp_assocparams>() - 20usize];
	["Alignment of sctp_assocparams"][::std::mem::align_of::<sctp_assocparams>() - 4usize];
	["Offset of field: sctp_assocparams::sasoc_assoc_id"]
		[::std::mem::offset_of!(sctp_assocparams, sasoc_assoc_id) - 0usize];
	["Offset of field: sctp_assocparams::sasoc_peer_rwnd"]
		[::std::mem::offset_of!(sctp_assocparams, sasoc_peer_rwnd) - 4usize];
	["Offset of field: sctp_assocparams::sasoc_local_rwnd"]
		[::std::mem::offset_of!(sctp_assocparams, sasoc_local_rwnd) - 8usize];
	["Offset of field: sctp_assocparams::sasoc_cookie_life"]
		[::std::mem::offset_of!(sctp_assocparams, sasoc_cookie_life) - 12usize];
	["Offset of field: sctp_assocparams::sasoc_asocmaxrxt"]
		[::std::mem::offset_of!(sctp_assocparams, sasoc_asocmaxrxt) - 16usize];
	["Offset of field: sctp_assocparams::sasoc_number_peer_destinations"]
		[::std::mem::offset_of!(sctp_assocparams, sasoc_number_peer_destinations) - 18usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_setprim {
	pub ssp_addr: sockaddr_storage,
	pub ssp_assoc_id: sctp_assoc_t,
	pub ssp_padding: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_setprim"][::std::mem::size_of::<sctp_setprim>() - 136usize];
	["Alignment of sctp_setprim"][::std::mem::align_of::<sctp_setprim>() - 8usize];
	["Offset of field: sctp_setprim::ssp_addr"]
		[::std::mem::offset_of!(sctp_setprim, ssp_addr) - 0usize];
	["Offset of field: sctp_setprim::ssp_assoc_id"]
		[::std::mem::offset_of!(sctp_setprim, ssp_assoc_id) - 128usize];
	["Offset of field: sctp_setprim::ssp_padding"]
		[::std::mem::offset_of!(sctp_setprim, ssp_padding) - 132usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_setadaptation {
	pub ssb_adaptation_ind: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_setadaptation"][::std::mem::size_of::<sctp_setadaptation>() - 4usize];
	["Alignment of sctp_setadaptation"][::std::mem::align_of::<sctp_setadaptation>() - 4usize];
	["Offset of field: sctp_setadaptation::ssb_adaptation_ind"]
		[::std::mem::offset_of!(sctp_setadaptation, ssb_adaptation_ind) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_paddrparams {
	pub spp_address: sockaddr_storage,
	pub spp_assoc_id: sctp_assoc_t,
	pub spp_hbinterval: u32,
	pub spp_pathmtu: u32,
	pub spp_flags: u32,
	pub spp_ipv6_flowlabel: u32,
	pub spp_pathmaxrxt: u16,
	pub spp_dscp: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_paddrparams"][::std::mem::size_of::<sctp_paddrparams>() - 152usize];
	["Alignment of sctp_paddrparams"][::std::mem::align_of::<sctp_paddrparams>() - 8usize];
	["Offset of field: sctp_paddrparams::spp_address"]
		[::std::mem::offset_of!(sctp_paddrparams, spp_address) - 0usize];
	["Offset of field: sctp_paddrparams::spp_assoc_id"]
		[::std::mem::offset_of!(sctp_paddrparams, spp_assoc_id) - 128usize];
	["Offset of field: sctp_paddrparams::spp_hbinterval"]
		[::std::mem::offset_of!(sctp_paddrparams, spp_hbinterval) - 132usize];
	["Offset of field: sctp_paddrparams::spp_pathmtu"]
		[::std::mem::offset_of!(sctp_paddrparams, spp_pathmtu) - 136usize];
	["Offset of field: sctp_paddrparams::spp_flags"]
		[::std::mem::offset_of!(sctp_paddrparams, spp_flags) - 140usize];
	["Offset of field: sctp_paddrparams::spp_ipv6_flowlabel"]
		[::std::mem::offset_of!(sctp_paddrparams, spp_ipv6_flowlabel) - 144usize];
	["Offset of field: sctp_paddrparams::spp_pathmaxrxt"]
		[::std::mem::offset_of!(sctp_paddrparams, spp_pathmaxrxt) - 148usize];
	["Offset of field: sctp_paddrparams::spp_dscp"]
		[::std::mem::offset_of!(sctp_paddrparams, spp_dscp) - 150usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_assoc_value {
	pub assoc_id: sctp_assoc_t,
	pub assoc_value: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_assoc_value"][::std::mem::size_of::<sctp_assoc_value>() - 8usize];
	["Alignment of sctp_assoc_value"][::std::mem::align_of::<sctp_assoc_value>() - 4usize];
	["Offset of field: sctp_assoc_value::assoc_id"]
		[::std::mem::offset_of!(sctp_assoc_value, assoc_id) - 0usize];
	["Offset of field: sctp_assoc_value::assoc_value"]
		[::std::mem::offset_of!(sctp_assoc_value, assoc_value) - 4usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct sctp_reset_streams {
	pub srs_assoc_id: sctp_assoc_t,
	pub srs_flags: u16,
	pub srs_number_streams: u16,
	pub srs_stream_list: __IncompleteArrayField<u16>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_reset_streams"][::std::mem::size_of::<sctp_reset_streams>() - 8usize];
	["Alignment of sctp_reset_streams"][::std::mem::align_of::<sctp_reset_streams>() - 4usize];
	["Offset of field: sctp_reset_streams::srs_assoc_id"]
		[::std::mem::offset_of!(sctp_reset_streams, srs_assoc_id) - 0usize];
	["Offset of field: sctp_reset_streams::srs_flags"]
		[::std::mem::offset_of!(sctp_reset_streams, srs_flags) - 4usize];
	["Offset of field: sctp_reset_streams::srs_number_streams"]
		[::std::mem::offset_of!(sctp_reset_streams, srs_number_streams) - 6usize];
	["Offset of field: sctp_reset_streams::srs_stream_list"]
		[::std::mem::offset_of!(sctp_reset_streams, srs_stream_list) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_add_streams {
	pub sas_assoc_id: sctp_assoc_t,
	pub sas_instrms: u16,
	pub sas_outstrms: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_add_streams"][::std::mem::size_of::<sctp_add_streams>() - 8usize];
	["Alignment of sctp_add_streams"][::std::mem::align_of::<sctp_add_streams>() - 4usize];
	["Offset of field: sctp_add_streams::sas_assoc_id"]
		[::std::mem::offset_of!(sctp_add_streams, sas_assoc_id) - 0usize];
	["Offset of field: sctp_add_streams::sas_instrms"]
		[::std::mem::offset_of!(sctp_add_streams, sas_instrms) - 4usize];
	["Offset of field: sctp_add_streams::sas_outstrms"]
		[::std::mem::offset_of!(sctp_add_streams, sas_outstrms) - 6usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct sctp_hmacalgo {
	pub shmac_number_of_idents: u32,
	pub shmac_idents: __IncompleteArrayField<u16>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_hmacalgo"][::std::mem::size_of::<sctp_hmacalgo>() - 4usize];
	["Alignment of sctp_hmacalgo"][::std::mem::align_of::<sctp_hmacalgo>() - 4usize];
	["Offset of field: sctp_hmacalgo::shmac_number_of_idents"]
		[::std::mem::offset_of!(sctp_hmacalgo, shmac_number_of_idents) - 0usize];
	["Offset of field: sctp_hmacalgo::shmac_idents"]
		[::std::mem::offset_of!(sctp_hmacalgo, shmac_idents) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_sack_info {
	pub sack_assoc_id: sctp_assoc_t,
	pub sack_delay: u32,
	pub sack_freq: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_sack_info"][::std::mem::size_of::<sctp_sack_info>() - 12usize];
	["Alignment of sctp_sack_info"][::std::mem::align_of::<sctp_sack_info>() - 4usize];
	["Offset of field: sctp_sack_info::sack_assoc_id"]
		[::std::mem::offset_of!(sctp_sack_info, sack_assoc_id) - 0usize];
	["Offset of field: sctp_sack_info::sack_delay"]
		[::std::mem::offset_of!(sctp_sack_info, sack_delay) - 4usize];
	["Offset of field: sctp_sack_info::sack_freq"]
		[::std::mem::offset_of!(sctp_sack_info, sack_freq) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_default_prinfo {
	pub pr_policy: u16,
	pub pr_value: u32,
	pub pr_assoc_id: sctp_assoc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_default_prinfo"][::std::mem::size_of::<sctp_default_prinfo>() - 12usize];
	["Alignment of sctp_default_prinfo"][::std::mem::align_of::<sctp_default_prinfo>() - 4usize];
	["Offset of field: sctp_default_prinfo::pr_policy"]
		[::std::mem::offset_of!(sctp_default_prinfo, pr_policy) - 0usize];
	["Offset of field: sctp_default_prinfo::pr_value"]
		[::std::mem::offset_of!(sctp_default_prinfo, pr_value) - 4usize];
	["Offset of field: sctp_default_prinfo::pr_assoc_id"]
		[::std::mem::offset_of!(sctp_default_prinfo, pr_assoc_id) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_paddrinfo {
	pub spinfo_address: sockaddr_storage,
	pub spinfo_assoc_id: sctp_assoc_t,
	pub spinfo_state: i32,
	pub spinfo_cwnd: u32,
	pub spinfo_srtt: u32,
	pub spinfo_rto: u32,
	pub spinfo_mtu: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_paddrinfo"][::std::mem::size_of::<sctp_paddrinfo>() - 152usize];
	["Alignment of sctp_paddrinfo"][::std::mem::align_of::<sctp_paddrinfo>() - 8usize];
	["Offset of field: sctp_paddrinfo::spinfo_address"]
		[::std::mem::offset_of!(sctp_paddrinfo, spinfo_address) - 0usize];
	["Offset of field: sctp_paddrinfo::spinfo_assoc_id"]
		[::std::mem::offset_of!(sctp_paddrinfo, spinfo_assoc_id) - 128usize];
	["Offset of field: sctp_paddrinfo::spinfo_state"]
		[::std::mem::offset_of!(sctp_paddrinfo, spinfo_state) - 132usize];
	["Offset of field: sctp_paddrinfo::spinfo_cwnd"]
		[::std::mem::offset_of!(sctp_paddrinfo, spinfo_cwnd) - 136usize];
	["Offset of field: sctp_paddrinfo::spinfo_srtt"]
		[::std::mem::offset_of!(sctp_paddrinfo, spinfo_srtt) - 140usize];
	["Offset of field: sctp_paddrinfo::spinfo_rto"]
		[::std::mem::offset_of!(sctp_paddrinfo, spinfo_rto) - 144usize];
	["Offset of field: sctp_paddrinfo::spinfo_mtu"]
		[::std::mem::offset_of!(sctp_paddrinfo, spinfo_mtu) - 148usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_status {
	pub sstat_assoc_id: sctp_assoc_t,
	pub sstat_state: i32,
	pub sstat_rwnd: u32,
	pub sstat_unackdata: u16,
	pub sstat_penddata: u16,
	pub sstat_instrms: u16,
	pub sstat_outstrms: u16,
	pub sstat_fragmentation_point: u32,
	pub sstat_primary: sctp_paddrinfo,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_status"][::std::mem::size_of::<sctp_status>() - 176usize];
	["Alignment of sctp_status"][::std::mem::align_of::<sctp_status>() - 8usize];
	["Offset of field: sctp_status::sstat_assoc_id"]
		[::std::mem::offset_of!(sctp_status, sstat_assoc_id) - 0usize];
	["Offset of field: sctp_status::sstat_state"]
		[::std::mem::offset_of!(sctp_status, sstat_state) - 4usize];
	["Offset of field: sctp_status::sstat_rwnd"]
		[::std::mem::offset_of!(sctp_status, sstat_rwnd) - 8usize];
	["Offset of field: sctp_status::sstat_unackdata"]
		[::std::mem::offset_of!(sctp_status, sstat_unackdata) - 12usize];
	["Offset of field: sctp_status::sstat_penddata"]
		[::std::mem::offset_of!(sctp_status, sstat_penddata) - 14usize];
	["Offset of field: sctp_status::sstat_instrms"]
		[::std::mem::offset_of!(sctp_status, sstat_instrms) - 16usize];
	["Offset of field: sctp_status::sstat_outstrms"]
		[::std::mem::offset_of!(sctp_status, sstat_outstrms) - 18usize];
	["Offset of field: sctp_status::sstat_fragmentation_point"]
		[::std::mem::offset_of!(sctp_status, sstat_fragmentation_point) - 20usize];
	["Offset of field: sctp_status::sstat_primary"]
		[::std::mem::offset_of!(sctp_status, sstat_primary) - 24usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct sctp_authchunks {
	pub gauth_assoc_id: sctp_assoc_t,
	pub gauth_chunks: __IncompleteArrayField<u8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_authchunks"][::std::mem::size_of::<sctp_authchunks>() - 4usize];
	["Alignment of sctp_authchunks"][::std::mem::align_of::<sctp_authchunks>() - 4usize];
	["Offset of field: sctp_authchunks::gauth_assoc_id"]
		[::std::mem::offset_of!(sctp_authchunks, gauth_assoc_id) - 0usize];
	["Offset of field: sctp_authchunks::gauth_chunks"]
		[::std::mem::offset_of!(sctp_authchunks, gauth_chunks) - 4usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct sctp_assoc_ids {
	pub gaids_number_of_ids: u32,
	pub gaids_assoc_id: __IncompleteArrayField<sctp_assoc_t>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_assoc_ids"][::std::mem::size_of::<sctp_assoc_ids>() - 4usize];
	["Alignment of sctp_assoc_ids"][::std::mem::align_of::<sctp_assoc_ids>() - 4usize];
	["Offset of field: sctp_assoc_ids::gaids_number_of_ids"]
		[::std::mem::offset_of!(sctp_assoc_ids, gaids_number_of_ids) - 0usize];
	["Offset of field: sctp_assoc_ids::gaids_assoc_id"]
		[::std::mem::offset_of!(sctp_assoc_ids, gaids_assoc_id) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_setpeerprim {
	pub sspp_addr: sockaddr_storage,
	pub sspp_assoc_id: sctp_assoc_t,
	pub sspp_padding: [u8; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_setpeerprim"][::std::mem::size_of::<sctp_setpeerprim>() - 136usize];
	["Alignment of sctp_setpeerprim"][::std::mem::align_of::<sctp_setpeerprim>() - 8usize];
	["Offset of field: sctp_setpeerprim::sspp_addr"]
		[::std::mem::offset_of!(sctp_setpeerprim, sspp_addr) - 0usize];
	["Offset of field: sctp_setpeerprim::sspp_assoc_id"]
		[::std::mem::offset_of!(sctp_setpeerprim, sspp_assoc_id) - 128usize];
	["Offset of field: sctp_setpeerprim::sspp_padding"]
		[::std::mem::offset_of!(sctp_setpeerprim, sspp_padding) - 132usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_authchunk {
	pub sauth_chunk: u8,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_authchunk"][::std::mem::size_of::<sctp_authchunk>() - 1usize];
	["Alignment of sctp_authchunk"][::std::mem::align_of::<sctp_authchunk>() - 1usize];
	["Offset of field: sctp_authchunk::sauth_chunk"]
		[::std::mem::offset_of!(sctp_authchunk, sauth_chunk) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_get_nonce_values {
	pub gn_assoc_id: sctp_assoc_t,
	pub gn_peers_tag: u32,
	pub gn_local_tag: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_get_nonce_values"][::std::mem::size_of::<sctp_get_nonce_values>() - 12usize];
	["Alignment of sctp_get_nonce_values"]
		[::std::mem::align_of::<sctp_get_nonce_values>() - 4usize];
	["Offset of field: sctp_get_nonce_values::gn_assoc_id"]
		[::std::mem::offset_of!(sctp_get_nonce_values, gn_assoc_id) - 0usize];
	["Offset of field: sctp_get_nonce_values::gn_peers_tag"]
		[::std::mem::offset_of!(sctp_get_nonce_values, gn_peers_tag) - 4usize];
	["Offset of field: sctp_get_nonce_values::gn_local_tag"]
		[::std::mem::offset_of!(sctp_get_nonce_values, gn_local_tag) - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct sctp_authkey {
	pub sca_assoc_id: sctp_assoc_t,
	pub sca_keynumber: u16,
	pub sca_keylength: u16,
	pub sca_key: __IncompleteArrayField<u8>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_authkey"][::std::mem::size_of::<sctp_authkey>() - 8usize];
	["Alignment of sctp_authkey"][::std::mem::align_of::<sctp_authkey>() - 4usize];
	["Offset of field: sctp_authkey::sca_assoc_id"]
		[::std::mem::offset_of!(sctp_authkey, sca_assoc_id) - 0usize];
	["Offset of field: sctp_authkey::sca_keynumber"]
		[::std::mem::offset_of!(sctp_authkey, sca_keynumber) - 4usize];
	["Offset of field: sctp_authkey::sca_keylength"]
		[::std::mem::offset_of!(sctp_authkey, sca_keylength) - 6usize];
	["Offset of field: sctp_authkey::sca_key"]
		[::std::mem::offset_of!(sctp_authkey, sca_key) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_authkeyid {
	pub scact_assoc_id: sctp_assoc_t,
	pub scact_keynumber: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_authkeyid"][::std::mem::size_of::<sctp_authkeyid>() - 8usize];
	["Alignment of sctp_authkeyid"][::std::mem::align_of::<sctp_authkeyid>() - 4usize];
	["Offset of field: sctp_authkeyid::scact_assoc_id"]
		[::std::mem::offset_of!(sctp_authkeyid, scact_assoc_id) - 0usize];
	["Offset of field: sctp_authkeyid::scact_keynumber"]
		[::std::mem::offset_of!(sctp_authkeyid, scact_keynumber) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_cc_option {
	pub option: ::std::os::raw::c_int,
	pub aid_value: sctp_assoc_value,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_cc_option"][::std::mem::size_of::<sctp_cc_option>() - 12usize];
	["Alignment of sctp_cc_option"][::std::mem::align_of::<sctp_cc_option>() - 4usize];
	["Offset of field: sctp_cc_option::option"]
		[::std::mem::offset_of!(sctp_cc_option, option) - 0usize];
	["Offset of field: sctp_cc_option::aid_value"]
		[::std::mem::offset_of!(sctp_cc_option, aid_value) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_stream_value {
	pub assoc_id: sctp_assoc_t,
	pub stream_id: u16,
	pub stream_value: u16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_stream_value"][::std::mem::size_of::<sctp_stream_value>() - 8usize];
	["Alignment of sctp_stream_value"][::std::mem::align_of::<sctp_stream_value>() - 4usize];
	["Offset of field: sctp_stream_value::assoc_id"]
		[::std::mem::offset_of!(sctp_stream_value, assoc_id) - 0usize];
	["Offset of field: sctp_stream_value::stream_id"]
		[::std::mem::offset_of!(sctp_stream_value, stream_id) - 4usize];
	["Offset of field: sctp_stream_value::stream_value"]
		[::std::mem::offset_of!(sctp_stream_value, stream_value) - 6usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_timeouts {
	pub stimo_assoc_id: sctp_assoc_t,
	pub stimo_init: u32,
	pub stimo_data: u32,
	pub stimo_sack: u32,
	pub stimo_shutdown: u32,
	pub stimo_heartbeat: u32,
	pub stimo_cookie: u32,
	pub stimo_shutdownack: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_timeouts"][::std::mem::size_of::<sctp_timeouts>() - 32usize];
	["Alignment of sctp_timeouts"][::std::mem::align_of::<sctp_timeouts>() - 4usize];
	["Offset of field: sctp_timeouts::stimo_assoc_id"]
		[::std::mem::offset_of!(sctp_timeouts, stimo_assoc_id) - 0usize];
	["Offset of field: sctp_timeouts::stimo_init"]
		[::std::mem::offset_of!(sctp_timeouts, stimo_init) - 4usize];
	["Offset of field: sctp_timeouts::stimo_data"]
		[::std::mem::offset_of!(sctp_timeouts, stimo_data) - 8usize];
	["Offset of field: sctp_timeouts::stimo_sack"]
		[::std::mem::offset_of!(sctp_timeouts, stimo_sack) - 12usize];
	["Offset of field: sctp_timeouts::stimo_shutdown"]
		[::std::mem::offset_of!(sctp_timeouts, stimo_shutdown) - 16usize];
	["Offset of field: sctp_timeouts::stimo_heartbeat"]
		[::std::mem::offset_of!(sctp_timeouts, stimo_heartbeat) - 20usize];
	["Offset of field: sctp_timeouts::stimo_cookie"]
		[::std::mem::offset_of!(sctp_timeouts, stimo_cookie) - 24usize];
	["Offset of field: sctp_timeouts::stimo_shutdownack"]
		[::std::mem::offset_of!(sctp_timeouts, stimo_shutdownack) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_prstatus {
	pub sprstat_assoc_id: sctp_assoc_t,
	pub sprstat_sid: u16,
	pub sprstat_policy: u16,
	pub sprstat_abandoned_unsent: u64,
	pub sprstat_abandoned_sent: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_prstatus"][::std::mem::size_of::<sctp_prstatus>() - 24usize];
	["Alignment of sctp_prstatus"][::std::mem::align_of::<sctp_prstatus>() - 8usize];
	["Offset of field: sctp_prstatus::sprstat_assoc_id"]
		[::std::mem::offset_of!(sctp_prstatus, sprstat_assoc_id) - 0usize];
	["Offset of field: sctp_prstatus::sprstat_sid"]
		[::std::mem::offset_of!(sctp_prstatus, sprstat_sid) - 4usize];
	["Offset of field: sctp_prstatus::sprstat_policy"]
		[::std::mem::offset_of!(sctp_prstatus, sprstat_policy) - 6usize];
	["Offset of field: sctp_prstatus::sprstat_abandoned_unsent"]
		[::std::mem::offset_of!(sctp_prstatus, sprstat_abandoned_unsent) - 8usize];
	["Offset of field: sctp_prstatus::sprstat_abandoned_sent"]
		[::std::mem::offset_of!(sctp_prstatus, sprstat_abandoned_sent) - 16usize];
};
#[doc = " System calls"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct socket {
	_unused: [u8; 0],
}
unsafe extern "C" {
	pub fn usrsctp_init(
		arg1: u16,
		arg2: ::std::option::Option<
			unsafe extern "C" fn(
				addr: *mut ::std::os::raw::c_void,
				buffer: *mut ::std::os::raw::c_void,
				length: usize,
				tos: u8,
				set_df: u8,
			) -> ::std::os::raw::c_int,
		>,
		arg3: ::std::option::Option<
			unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...),
		>,
	);
}
unsafe extern "C" {
	pub fn usrsctp_init_nothreads(
		arg1: u16,
		arg2: ::std::option::Option<
			unsafe extern "C" fn(
				addr: *mut ::std::os::raw::c_void,
				buffer: *mut ::std::os::raw::c_void,
				length: usize,
				tos: u8,
				set_df: u8,
			) -> ::std::os::raw::c_int,
		>,
		arg3: ::std::option::Option<
			unsafe extern "C" fn(format: *const ::std::os::raw::c_char, ...),
		>,
	);
}
unsafe extern "C" {
	pub fn usrsctp_socket(
		domain: ::std::os::raw::c_int,
		type_: ::std::os::raw::c_int,
		protocol: ::std::os::raw::c_int,
		receive_cb: ::std::option::Option<
			unsafe extern "C" fn(
				sock: *mut socket,
				addr: sctp_sockstore,
				data: *mut ::std::os::raw::c_void,
				datalen: usize,
				arg1: sctp_rcvinfo,
				flags: ::std::os::raw::c_int,
				ulp_info: *mut ::std::os::raw::c_void,
			) -> ::std::os::raw::c_int,
		>,
		send_cb: ::std::option::Option<
			unsafe extern "C" fn(
				sock: *mut socket,
				sb_free: u32,
				ulp_info: *mut ::std::os::raw::c_void,
			) -> ::std::os::raw::c_int,
		>,
		sb_threshold: u32,
		ulp_info: *mut ::std::os::raw::c_void,
	) -> *mut socket;
}
unsafe extern "C" {
	pub fn usrsctp_setsockopt(
		so: *mut socket,
		level: ::std::os::raw::c_int,
		option_name: ::std::os::raw::c_int,
		option_value: *const ::std::os::raw::c_void,
		option_len: socklen_t,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_getsockopt(
		so: *mut socket,
		level: ::std::os::raw::c_int,
		option_name: ::std::os::raw::c_int,
		option_value: *mut ::std::os::raw::c_void,
		option_len: *mut socklen_t,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_opt_info(
		so: *mut socket,
		id: sctp_assoc_t,
		opt: ::std::os::raw::c_int,
		arg: *mut ::std::os::raw::c_void,
		size: *mut socklen_t,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_getpaddrs(
		so: *mut socket,
		id: sctp_assoc_t,
		raddrs: *mut *mut sockaddr,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_freepaddrs(addrs: *mut sockaddr);
}
unsafe extern "C" {
	pub fn usrsctp_getladdrs(
		so: *mut socket,
		id: sctp_assoc_t,
		raddrs: *mut *mut sockaddr,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_freeladdrs(addrs: *mut sockaddr);
}
unsafe extern "C" {
	pub fn usrsctp_sendv(
		so: *mut socket,
		data: *const ::std::os::raw::c_void,
		len: usize,
		to: *mut sockaddr,
		addrcnt: ::std::os::raw::c_int,
		info: *mut ::std::os::raw::c_void,
		infolen: socklen_t,
		infotype: ::std::os::raw::c_uint,
		flags: ::std::os::raw::c_int,
	) -> isize;
}
unsafe extern "C" {
	pub fn usrsctp_recvv(
		so: *mut socket,
		dbuf: *mut ::std::os::raw::c_void,
		len: usize,
		from: *mut sockaddr,
		fromlen: *mut socklen_t,
		info: *mut ::std::os::raw::c_void,
		infolen: *mut socklen_t,
		infotype: *mut ::std::os::raw::c_uint,
		msg_flags: *mut ::std::os::raw::c_int,
	) -> isize;
}
unsafe extern "C" {
	pub fn usrsctp_bind(
		so: *mut socket,
		name: *mut sockaddr,
		namelen: socklen_t,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_bindx(
		so: *mut socket,
		addrs: *mut sockaddr,
		addrcnt: ::std::os::raw::c_int,
		flags: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_listen(so: *mut socket, backlog: ::std::os::raw::c_int)
	-> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_accept(
		so: *mut socket,
		aname: *mut sockaddr,
		anamelen: *mut socklen_t,
	) -> *mut socket;
}
unsafe extern "C" {
	pub fn usrsctp_peeloff(arg1: *mut socket, arg2: sctp_assoc_t) -> *mut socket;
}
unsafe extern "C" {
	pub fn usrsctp_connect(
		so: *mut socket,
		name: *mut sockaddr,
		namelen: socklen_t,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_connectx(
		so: *mut socket,
		addrs: *const sockaddr,
		addrcnt: ::std::os::raw::c_int,
		id: *mut sctp_assoc_t,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_close(so: *mut socket);
}
unsafe extern "C" {
	pub fn usrsctp_getassocid(arg1: *mut socket, arg2: *mut sockaddr) -> sctp_assoc_t;
}
unsafe extern "C" {
	pub fn usrsctp_finish() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_shutdown(so: *mut socket, how: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_conninput(
		arg1: *mut ::std::os::raw::c_void,
		arg2: *const ::std::os::raw::c_void,
		arg3: usize,
		arg4: u8,
	);
}
unsafe extern "C" {
	pub fn usrsctp_set_non_blocking(
		arg1: *mut socket,
		arg2: ::std::os::raw::c_int,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_get_non_blocking(arg1: *mut socket) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_register_address(arg1: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
	pub fn usrsctp_deregister_address(arg1: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
	pub fn usrsctp_set_ulpinfo(
		arg1: *mut socket,
		arg2: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_get_ulpinfo(
		arg1: *mut socket,
		arg2: *mut *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_set_upcall(
		so: *mut socket,
		upcall: ::std::option::Option<
			unsafe extern "C" fn(
				arg1: *mut socket,
				arg2: *mut ::std::os::raw::c_void,
				arg3: ::std::os::raw::c_int,
			),
		>,
		arg: *mut ::std::os::raw::c_void,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_get_events(so: *mut socket) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_handle_timers(elapsed_milliseconds: u32);
}
unsafe extern "C" {
	pub fn usrsctp_dumppacket(
		arg1: *const ::std::os::raw::c_void,
		arg2: usize,
		arg3: ::std::os::raw::c_int,
	) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
	pub fn usrsctp_freedumpbuffer(arg1: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
	pub fn usrsctp_enable_crc32c_offload();
}
unsafe extern "C" {
	pub fn usrsctp_disable_crc32c_offload();
}
unsafe extern "C" {
	pub fn usrsctp_crc32c(arg1: *mut ::std::os::raw::c_void, arg2: usize) -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_tunable_set_sctp_hashtblsize(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_hashtblsize() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_tunable_set_sctp_pcbtblsize(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_pcbtblsize() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_tunable_set_sctp_chunkscale(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_chunkscale() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_sendspace(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_sendspace() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_recvspace(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_recvspace() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_auto_asconf(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_auto_asconf() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_multiple_asconfs(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_multiple_asconfs() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_ecn_enable(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_ecn_enable() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_pr_enable(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_pr_enable() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_auth_enable(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_auth_enable() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_asconf_enable(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_asconf_enable() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_reconfig_enable(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_reconfig_enable() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_nrsack_enable(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_nrsack_enable() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_pktdrop_enable(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_pktdrop_enable() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_no_csum_on_loopback(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_no_csum_on_loopback() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_peer_chunk_oh(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_peer_chunk_oh() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_max_burst_default(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_max_burst_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_max_chunks_on_queue(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_max_chunks_on_queue() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_min_split_point(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_min_split_point() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_delayed_sack_time_default(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_delayed_sack_time_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_sack_freq_default(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_sack_freq_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_system_free_resc_limit(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_system_free_resc_limit() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_asoc_free_resc_limit(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_asoc_free_resc_limit() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_heartbeat_interval_default(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_heartbeat_interval_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_pmtu_raise_time_default(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_pmtu_raise_time_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_shutdown_guard_time_default(value: u32)
	-> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_shutdown_guard_time_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_secret_lifetime_default(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_secret_lifetime_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_rto_max_default(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_rto_max_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_rto_min_default(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_rto_min_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_rto_initial_default(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_rto_initial_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_init_rto_max_default(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_init_rto_max_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_valid_cookie_life_default(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_valid_cookie_life_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_init_rtx_max_default(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_init_rtx_max_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_assoc_rtx_max_default(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_assoc_rtx_max_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_path_rtx_max_default(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_path_rtx_max_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_add_more_threshold(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_add_more_threshold() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_nr_incoming_streams_default(value: u32)
	-> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_nr_incoming_streams_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_nr_outgoing_streams_default(value: u32)
	-> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_nr_outgoing_streams_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_cmt_on_off(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_cmt_on_off() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_cmt_use_dac(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_cmt_use_dac() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_use_cwnd_based_maxburst(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_use_cwnd_based_maxburst() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_nat_friendly(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_nat_friendly() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_L2_abc_variable(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_L2_abc_variable() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_mbuf_threshold_count(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_mbuf_threshold_count() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_do_drain(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_do_drain() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_hb_maxburst(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_hb_maxburst() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_abort_if_one_2_one_hits_limit(
		value: u32,
	) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_abort_if_one_2_one_hits_limit() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_min_residual(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_min_residual() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_max_retran_chunk(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_max_retran_chunk() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_logging_level(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_logging_level() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_default_cc_module(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_default_cc_module() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_default_frag_interleave(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_default_frag_interleave() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_mobility_base(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_mobility_base() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_mobility_fasthandoff(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_mobility_fasthandoff() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_inits_include_nat_friendly(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_inits_include_nat_friendly() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_udp_tunneling_port(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_udp_tunneling_port() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_enable_sack_immediately(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_enable_sack_immediately() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_vtag_time_wait(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_vtag_time_wait() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_blackhole(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_blackhole() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_sendall_limit(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_sendall_limit() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_diag_info_code(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_diag_info_code() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_fr_max_burst_default(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_fr_max_burst_default() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_path_pf_threshold(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_path_pf_threshold() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_default_ss_module(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_default_ss_module() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_rttvar_bw(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_rttvar_bw() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_rttvar_rtt(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_rttvar_rtt() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_rttvar_eqret(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_rttvar_eqret() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_steady_step(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_steady_step() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_use_dccc_ecn(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_use_dccc_ecn() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_buffer_splitting(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_buffer_splitting() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_initial_cwnd(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_initial_cwnd() -> u32;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_set_sctp_ootb_with_zero_cksum(value: u32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
	pub fn usrsctp_sysctl_get_sctp_ootb_with_zero_cksum() -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctp_timeval {
	pub tv_sec: u32,
	pub tv_usec: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctp_timeval"][::std::mem::size_of::<sctp_timeval>() - 8usize];
	["Alignment of sctp_timeval"][::std::mem::align_of::<sctp_timeval>() - 4usize];
	["Offset of field: sctp_timeval::tv_sec"]
		[::std::mem::offset_of!(sctp_timeval, tv_sec) - 0usize];
	["Offset of field: sctp_timeval::tv_usec"]
		[::std::mem::offset_of!(sctp_timeval, tv_usec) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sctpstat {
	pub sctps_discontinuitytime: sctp_timeval,
	pub sctps_currestab: u32,
	pub sctps_activeestab: u32,
	pub sctps_restartestab: u32,
	pub sctps_collisionestab: u32,
	pub sctps_passiveestab: u32,
	pub sctps_aborted: u32,
	pub sctps_shutdown: u32,
	pub sctps_outoftheblue: u32,
	pub sctps_checksumerrors: u32,
	pub sctps_outcontrolchunks: u32,
	pub sctps_outorderchunks: u32,
	pub sctps_outunorderchunks: u32,
	pub sctps_incontrolchunks: u32,
	pub sctps_inorderchunks: u32,
	pub sctps_inunorderchunks: u32,
	pub sctps_fragusrmsgs: u32,
	pub sctps_reasmusrmsgs: u32,
	pub sctps_outpackets: u32,
	pub sctps_inpackets: u32,
	pub sctps_recvpackets: u32,
	pub sctps_recvdatagrams: u32,
	pub sctps_recvpktwithdata: u32,
	pub sctps_recvsacks: u32,
	pub sctps_recvdata: u32,
	pub sctps_recvdupdata: u32,
	pub sctps_recvheartbeat: u32,
	pub sctps_recvheartbeatack: u32,
	pub sctps_recvecne: u32,
	pub sctps_recvauth: u32,
	pub sctps_recvauthmissing: u32,
	pub sctps_recvivalhmacid: u32,
	pub sctps_recvivalkeyid: u32,
	pub sctps_recvauthfailed: u32,
	pub sctps_recvexpress: u32,
	pub sctps_recvexpressm: u32,
	pub sctps_recv_spare: u32,
	pub sctps_recvswcrc: u32,
	pub sctps_recvhwcrc: u32,
	pub sctps_sendpackets: u32,
	pub sctps_sendsacks: u32,
	pub sctps_senddata: u32,
	pub sctps_sendretransdata: u32,
	pub sctps_sendfastretrans: u32,
	pub sctps_sendmultfastretrans: u32,
	pub sctps_sendheartbeat: u32,
	pub sctps_sendecne: u32,
	pub sctps_sendauth: u32,
	pub sctps_senderrors: u32,
	pub sctps_send_spare: u32,
	pub sctps_sendswcrc: u32,
	pub sctps_sendhwcrc: u32,
	pub sctps_pdrpfmbox: u32,
	pub sctps_pdrpfehos: u32,
	pub sctps_pdrpmbda: u32,
	pub sctps_pdrpmbct: u32,
	pub sctps_pdrpbwrpt: u32,
	pub sctps_pdrpcrupt: u32,
	pub sctps_pdrpnedat: u32,
	pub sctps_pdrppdbrk: u32,
	pub sctps_pdrptsnnf: u32,
	pub sctps_pdrpdnfnd: u32,
	pub sctps_pdrpdiwnp: u32,
	pub sctps_pdrpdizrw: u32,
	pub sctps_pdrpbadd: u32,
	pub sctps_pdrpmark: u32,
	pub sctps_timoiterator: u32,
	pub sctps_timodata: u32,
	pub sctps_timowindowprobe: u32,
	pub sctps_timoinit: u32,
	pub sctps_timosack: u32,
	pub sctps_timoshutdown: u32,
	pub sctps_timoheartbeat: u32,
	pub sctps_timocookie: u32,
	pub sctps_timosecret: u32,
	pub sctps_timopathmtu: u32,
	pub sctps_timoshutdownack: u32,
	pub sctps_timoshutdownguard: u32,
	pub sctps_timostrmrst: u32,
	pub sctps_timoearlyfr: u32,
	pub sctps_timoasconf: u32,
	pub sctps_timodelprim: u32,
	pub sctps_timoautoclose: u32,
	pub sctps_timoassockill: u32,
	pub sctps_timoinpkill: u32,
	pub sctps_spare: [u32; 11usize],
	pub sctps_hdrops: u32,
	pub sctps_badsum: u32,
	pub sctps_noport: u32,
	pub sctps_badvtag: u32,
	pub sctps_badsid: u32,
	pub sctps_nomem: u32,
	pub sctps_fastretransinrtt: u32,
	pub sctps_markedretrans: u32,
	pub sctps_naglesent: u32,
	pub sctps_naglequeued: u32,
	pub sctps_maxburstqueued: u32,
	pub sctps_ifnomemqueued: u32,
	pub sctps_windowprobed: u32,
	pub sctps_lowlevelerr: u32,
	pub sctps_lowlevelerrusr: u32,
	pub sctps_datadropchklmt: u32,
	pub sctps_datadroprwnd: u32,
	pub sctps_ecnereducedcwnd: u32,
	pub sctps_vtagexpress: u32,
	pub sctps_vtagbogus: u32,
	pub sctps_primary_randry: u32,
	pub sctps_cmt_randry: u32,
	pub sctps_slowpath_sack: u32,
	pub sctps_wu_sacks_sent: u32,
	pub sctps_sends_with_flags: u32,
	pub sctps_sends_with_unord: u32,
	pub sctps_sends_with_eof: u32,
	pub sctps_sends_with_abort: u32,
	pub sctps_protocol_drain_calls: u32,
	pub sctps_protocol_drains_done: u32,
	pub sctps_read_peeks: u32,
	pub sctps_cached_chk: u32,
	pub sctps_cached_strmoq: u32,
	pub sctps_left_abandon: u32,
	pub sctps_send_burst_avoid: u32,
	pub sctps_send_cwnd_avoid: u32,
	pub sctps_fwdtsn_map_over: u32,
	pub sctps_queue_upd_ecne: u32,
	pub sctps_recvzerocrc: u32,
	pub sctps_sendzerocrc: u32,
	pub sctps_reserved: [u32; 29usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
	["Size of sctpstat"][::std::mem::size_of::<sctpstat>() - 664usize];
	["Alignment of sctpstat"][::std::mem::align_of::<sctpstat>() - 4usize];
	["Offset of field: sctpstat::sctps_discontinuitytime"]
		[::std::mem::offset_of!(sctpstat, sctps_discontinuitytime) - 0usize];
	["Offset of field: sctpstat::sctps_currestab"]
		[::std::mem::offset_of!(sctpstat, sctps_currestab) - 8usize];
	["Offset of field: sctpstat::sctps_activeestab"]
		[::std::mem::offset_of!(sctpstat, sctps_activeestab) - 12usize];
	["Offset of field: sctpstat::sctps_restartestab"]
		[::std::mem::offset_of!(sctpstat, sctps_restartestab) - 16usize];
	["Offset of field: sctpstat::sctps_collisionestab"]
		[::std::mem::offset_of!(sctpstat, sctps_collisionestab) - 20usize];
	["Offset of field: sctpstat::sctps_passiveestab"]
		[::std::mem::offset_of!(sctpstat, sctps_passiveestab) - 24usize];
	["Offset of field: sctpstat::sctps_aborted"]
		[::std::mem::offset_of!(sctpstat, sctps_aborted) - 28usize];
	["Offset of field: sctpstat::sctps_shutdown"]
		[::std::mem::offset_of!(sctpstat, sctps_shutdown) - 32usize];
	["Offset of field: sctpstat::sctps_outoftheblue"]
		[::std::mem::offset_of!(sctpstat, sctps_outoftheblue) - 36usize];
	["Offset of field: sctpstat::sctps_checksumerrors"]
		[::std::mem::offset_of!(sctpstat, sctps_checksumerrors) - 40usize];
	["Offset of field: sctpstat::sctps_outcontrolchunks"]
		[::std::mem::offset_of!(sctpstat, sctps_outcontrolchunks) - 44usize];
	["Offset of field: sctpstat::sctps_outorderchunks"]
		[::std::mem::offset_of!(sctpstat, sctps_outorderchunks) - 48usize];
	["Offset of field: sctpstat::sctps_outunorderchunks"]
		[::std::mem::offset_of!(sctpstat, sctps_outunorderchunks) - 52usize];
	["Offset of field: sctpstat::sctps_incontrolchunks"]
		[::std::mem::offset_of!(sctpstat, sctps_incontrolchunks) - 56usize];
	["Offset of field: sctpstat::sctps_inorderchunks"]
		[::std::mem::offset_of!(sctpstat, sctps_inorderchunks) - 60usize];
	["Offset of field: sctpstat::sctps_inunorderchunks"]
		[::std::mem::offset_of!(sctpstat, sctps_inunorderchunks) - 64usize];
	["Offset of field: sctpstat::sctps_fragusrmsgs"]
		[::std::mem::offset_of!(sctpstat, sctps_fragusrmsgs) - 68usize];
	["Offset of field: sctpstat::sctps_reasmusrmsgs"]
		[::std::mem::offset_of!(sctpstat, sctps_reasmusrmsgs) - 72usize];
	["Offset of field: sctpstat::sctps_outpackets"]
		[::std::mem::offset_of!(sctpstat, sctps_outpackets) - 76usize];
	["Offset of field: sctpstat::sctps_inpackets"]
		[::std::mem::offset_of!(sctpstat, sctps_inpackets) - 80usize];
	["Offset of field: sctpstat::sctps_recvpackets"]
		[::std::mem::offset_of!(sctpstat, sctps_recvpackets) - 84usize];
	["Offset of field: sctpstat::sctps_recvdatagrams"]
		[::std::mem::offset_of!(sctpstat, sctps_recvdatagrams) - 88usize];
	["Offset of field: sctpstat::sctps_recvpktwithdata"]
		[::std::mem::offset_of!(sctpstat, sctps_recvpktwithdata) - 92usize];
	["Offset of field: sctpstat::sctps_recvsacks"]
		[::std::mem::offset_of!(sctpstat, sctps_recvsacks) - 96usize];
	["Offset of field: sctpstat::sctps_recvdata"]
		[::std::mem::offset_of!(sctpstat, sctps_recvdata) - 100usize];
	["Offset of field: sctpstat::sctps_recvdupdata"]
		[::std::mem::offset_of!(sctpstat, sctps_recvdupdata) - 104usize];
	["Offset of field: sctpstat::sctps_recvheartbeat"]
		[::std::mem::offset_of!(sctpstat, sctps_recvheartbeat) - 108usize];
	["Offset of field: sctpstat::sctps_recvheartbeatack"]
		[::std::mem::offset_of!(sctpstat, sctps_recvheartbeatack) - 112usize];
	["Offset of field: sctpstat::sctps_recvecne"]
		[::std::mem::offset_of!(sctpstat, sctps_recvecne) - 116usize];
	["Offset of field: sctpstat::sctps_recvauth"]
		[::std::mem::offset_of!(sctpstat, sctps_recvauth) - 120usize];
	["Offset of field: sctpstat::sctps_recvauthmissing"]
		[::std::mem::offset_of!(sctpstat, sctps_recvauthmissing) - 124usize];
	["Offset of field: sctpstat::sctps_recvivalhmacid"]
		[::std::mem::offset_of!(sctpstat, sctps_recvivalhmacid) - 128usize];
	["Offset of field: sctpstat::sctps_recvivalkeyid"]
		[::std::mem::offset_of!(sctpstat, sctps_recvivalkeyid) - 132usize];
	["Offset of field: sctpstat::sctps_recvauthfailed"]
		[::std::mem::offset_of!(sctpstat, sctps_recvauthfailed) - 136usize];
	["Offset of field: sctpstat::sctps_recvexpress"]
		[::std::mem::offset_of!(sctpstat, sctps_recvexpress) - 140usize];
	["Offset of field: sctpstat::sctps_recvexpressm"]
		[::std::mem::offset_of!(sctpstat, sctps_recvexpressm) - 144usize];
	["Offset of field: sctpstat::sctps_recv_spare"]
		[::std::mem::offset_of!(sctpstat, sctps_recv_spare) - 148usize];
	["Offset of field: sctpstat::sctps_recvswcrc"]
		[::std::mem::offset_of!(sctpstat, sctps_recvswcrc) - 152usize];
	["Offset of field: sctpstat::sctps_recvhwcrc"]
		[::std::mem::offset_of!(sctpstat, sctps_recvhwcrc) - 156usize];
	["Offset of field: sctpstat::sctps_sendpackets"]
		[::std::mem::offset_of!(sctpstat, sctps_sendpackets) - 160usize];
	["Offset of field: sctpstat::sctps_sendsacks"]
		[::std::mem::offset_of!(sctpstat, sctps_sendsacks) - 164usize];
	["Offset of field: sctpstat::sctps_senddata"]
		[::std::mem::offset_of!(sctpstat, sctps_senddata) - 168usize];
	["Offset of field: sctpstat::sctps_sendretransdata"]
		[::std::mem::offset_of!(sctpstat, sctps_sendretransdata) - 172usize];
	["Offset of field: sctpstat::sctps_sendfastretrans"]
		[::std::mem::offset_of!(sctpstat, sctps_sendfastretrans) - 176usize];
	["Offset of field: sctpstat::sctps_sendmultfastretrans"]
		[::std::mem::offset_of!(sctpstat, sctps_sendmultfastretrans) - 180usize];
	["Offset of field: sctpstat::sctps_sendheartbeat"]
		[::std::mem::offset_of!(sctpstat, sctps_sendheartbeat) - 184usize];
	["Offset of field: sctpstat::sctps_sendecne"]
		[::std::mem::offset_of!(sctpstat, sctps_sendecne) - 188usize];
	["Offset of field: sctpstat::sctps_sendauth"]
		[::std::mem::offset_of!(sctpstat, sctps_sendauth) - 192usize];
	["Offset of field: sctpstat::sctps_senderrors"]
		[::std::mem::offset_of!(sctpstat, sctps_senderrors) - 196usize];
	["Offset of field: sctpstat::sctps_send_spare"]
		[::std::mem::offset_of!(sctpstat, sctps_send_spare) - 200usize];
	["Offset of field: sctpstat::sctps_sendswcrc"]
		[::std::mem::offset_of!(sctpstat, sctps_sendswcrc) - 204usize];
	["Offset of field: sctpstat::sctps_sendhwcrc"]
		[::std::mem::offset_of!(sctpstat, sctps_sendhwcrc) - 208usize];
	["Offset of field: sctpstat::sctps_pdrpfmbox"]
		[::std::mem::offset_of!(sctpstat, sctps_pdrpfmbox) - 212usize];
	["Offset of field: sctpstat::sctps_pdrpfehos"]
		[::std::mem::offset_of!(sctpstat, sctps_pdrpfehos) - 216usize];
	["Offset of field: sctpstat::sctps_pdrpmbda"]
		[::std::mem::offset_of!(sctpstat, sctps_pdrpmbda) - 220usize];
	["Offset of field: sctpstat::sctps_pdrpmbct"]
		[::std::mem::offset_of!(sctpstat, sctps_pdrpmbct) - 224usize];
	["Offset of field: sctpstat::sctps_pdrpbwrpt"]
		[::std::mem::offset_of!(sctpstat, sctps_pdrpbwrpt) - 228usize];
	["Offset of field: sctpstat::sctps_pdrpcrupt"]
		[::std::mem::offset_of!(sctpstat, sctps_pdrpcrupt) - 232usize];
	["Offset of field: sctpstat::sctps_pdrpnedat"]
		[::std::mem::offset_of!(sctpstat, sctps_pdrpnedat) - 236usize];
	["Offset of field: sctpstat::sctps_pdrppdbrk"]
		[::std::mem::offset_of!(sctpstat, sctps_pdrppdbrk) - 240usize];
	["Offset of field: sctpstat::sctps_pdrptsnnf"]
		[::std::mem::offset_of!(sctpstat, sctps_pdrptsnnf) - 244usize];
	["Offset of field: sctpstat::sctps_pdrpdnfnd"]
		[::std::mem::offset_of!(sctpstat, sctps_pdrpdnfnd) - 248usize];
	["Offset of field: sctpstat::sctps_pdrpdiwnp"]
		[::std::mem::offset_of!(sctpstat, sctps_pdrpdiwnp) - 252usize];
	["Offset of field: sctpstat::sctps_pdrpdizrw"]
		[::std::mem::offset_of!(sctpstat, sctps_pdrpdizrw) - 256usize];
	["Offset of field: sctpstat::sctps_pdrpbadd"]
		[::std::mem::offset_of!(sctpstat, sctps_pdrpbadd) - 260usize];
	["Offset of field: sctpstat::sctps_pdrpmark"]
		[::std::mem::offset_of!(sctpstat, sctps_pdrpmark) - 264usize];
	["Offset of field: sctpstat::sctps_timoiterator"]
		[::std::mem::offset_of!(sctpstat, sctps_timoiterator) - 268usize];
	["Offset of field: sctpstat::sctps_timodata"]
		[::std::mem::offset_of!(sctpstat, sctps_timodata) - 272usize];
	["Offset of field: sctpstat::sctps_timowindowprobe"]
		[::std::mem::offset_of!(sctpstat, sctps_timowindowprobe) - 276usize];
	["Offset of field: sctpstat::sctps_timoinit"]
		[::std::mem::offset_of!(sctpstat, sctps_timoinit) - 280usize];
	["Offset of field: sctpstat::sctps_timosack"]
		[::std::mem::offset_of!(sctpstat, sctps_timosack) - 284usize];
	["Offset of field: sctpstat::sctps_timoshutdown"]
		[::std::mem::offset_of!(sctpstat, sctps_timoshutdown) - 288usize];
	["Offset of field: sctpstat::sctps_timoheartbeat"]
		[::std::mem::offset_of!(sctpstat, sctps_timoheartbeat) - 292usize];
	["Offset of field: sctpstat::sctps_timocookie"]
		[::std::mem::offset_of!(sctpstat, sctps_timocookie) - 296usize];
	["Offset of field: sctpstat::sctps_timosecret"]
		[::std::mem::offset_of!(sctpstat, sctps_timosecret) - 300usize];
	["Offset of field: sctpstat::sctps_timopathmtu"]
		[::std::mem::offset_of!(sctpstat, sctps_timopathmtu) - 304usize];
	["Offset of field: sctpstat::sctps_timoshutdownack"]
		[::std::mem::offset_of!(sctpstat, sctps_timoshutdownack) - 308usize];
	["Offset of field: sctpstat::sctps_timoshutdownguard"]
		[::std::mem::offset_of!(sctpstat, sctps_timoshutdownguard) - 312usize];
	["Offset of field: sctpstat::sctps_timostrmrst"]
		[::std::mem::offset_of!(sctpstat, sctps_timostrmrst) - 316usize];
	["Offset of field: sctpstat::sctps_timoearlyfr"]
		[::std::mem::offset_of!(sctpstat, sctps_timoearlyfr) - 320usize];
	["Offset of field: sctpstat::sctps_timoasconf"]
		[::std::mem::offset_of!(sctpstat, sctps_timoasconf) - 324usize];
	["Offset of field: sctpstat::sctps_timodelprim"]
		[::std::mem::offset_of!(sctpstat, sctps_timodelprim) - 328usize];
	["Offset of field: sctpstat::sctps_timoautoclose"]
		[::std::mem::offset_of!(sctpstat, sctps_timoautoclose) - 332usize];
	["Offset of field: sctpstat::sctps_timoassockill"]
		[::std::mem::offset_of!(sctpstat, sctps_timoassockill) - 336usize];
	["Offset of field: sctpstat::sctps_timoinpkill"]
		[::std::mem::offset_of!(sctpstat, sctps_timoinpkill) - 340usize];
	["Offset of field: sctpstat::sctps_spare"]
		[::std::mem::offset_of!(sctpstat, sctps_spare) - 344usize];
	["Offset of field: sctpstat::sctps_hdrops"]
		[::std::mem::offset_of!(sctpstat, sctps_hdrops) - 388usize];
	["Offset of field: sctpstat::sctps_badsum"]
		[::std::mem::offset_of!(sctpstat, sctps_badsum) - 392usize];
	["Offset of field: sctpstat::sctps_noport"]
		[::std::mem::offset_of!(sctpstat, sctps_noport) - 396usize];
	["Offset of field: sctpstat::sctps_badvtag"]
		[::std::mem::offset_of!(sctpstat, sctps_badvtag) - 400usize];
	["Offset of field: sctpstat::sctps_badsid"]
		[::std::mem::offset_of!(sctpstat, sctps_badsid) - 404usize];
	["Offset of field: sctpstat::sctps_nomem"]
		[::std::mem::offset_of!(sctpstat, sctps_nomem) - 408usize];
	["Offset of field: sctpstat::sctps_fastretransinrtt"]
		[::std::mem::offset_of!(sctpstat, sctps_fastretransinrtt) - 412usize];
	["Offset of field: sctpstat::sctps_markedretrans"]
		[::std::mem::offset_of!(sctpstat, sctps_markedretrans) - 416usize];
	["Offset of field: sctpstat::sctps_naglesent"]
		[::std::mem::offset_of!(sctpstat, sctps_naglesent) - 420usize];
	["Offset of field: sctpstat::sctps_naglequeued"]
		[::std::mem::offset_of!(sctpstat, sctps_naglequeued) - 424usize];
	["Offset of field: sctpstat::sctps_maxburstqueued"]
		[::std::mem::offset_of!(sctpstat, sctps_maxburstqueued) - 428usize];
	["Offset of field: sctpstat::sctps_ifnomemqueued"]
		[::std::mem::offset_of!(sctpstat, sctps_ifnomemqueued) - 432usize];
	["Offset of field: sctpstat::sctps_windowprobed"]
		[::std::mem::offset_of!(sctpstat, sctps_windowprobed) - 436usize];
	["Offset of field: sctpstat::sctps_lowlevelerr"]
		[::std::mem::offset_of!(sctpstat, sctps_lowlevelerr) - 440usize];
	["Offset of field: sctpstat::sctps_lowlevelerrusr"]
		[::std::mem::offset_of!(sctpstat, sctps_lowlevelerrusr) - 444usize];
	["Offset of field: sctpstat::sctps_datadropchklmt"]
		[::std::mem::offset_of!(sctpstat, sctps_datadropchklmt) - 448usize];
	["Offset of field: sctpstat::sctps_datadroprwnd"]
		[::std::mem::offset_of!(sctpstat, sctps_datadroprwnd) - 452usize];
	["Offset of field: sctpstat::sctps_ecnereducedcwnd"]
		[::std::mem::offset_of!(sctpstat, sctps_ecnereducedcwnd) - 456usize];
	["Offset of field: sctpstat::sctps_vtagexpress"]
		[::std::mem::offset_of!(sctpstat, sctps_vtagexpress) - 460usize];
	["Offset of field: sctpstat::sctps_vtagbogus"]
		[::std::mem::offset_of!(sctpstat, sctps_vtagbogus) - 464usize];
	["Offset of field: sctpstat::sctps_primary_randry"]
		[::std::mem::offset_of!(sctpstat, sctps_primary_randry) - 468usize];
	["Offset of field: sctpstat::sctps_cmt_randry"]
		[::std::mem::offset_of!(sctpstat, sctps_cmt_randry) - 472usize];
	["Offset of field: sctpstat::sctps_slowpath_sack"]
		[::std::mem::offset_of!(sctpstat, sctps_slowpath_sack) - 476usize];
	["Offset of field: sctpstat::sctps_wu_sacks_sent"]
		[::std::mem::offset_of!(sctpstat, sctps_wu_sacks_sent) - 480usize];
	["Offset of field: sctpstat::sctps_sends_with_flags"]
		[::std::mem::offset_of!(sctpstat, sctps_sends_with_flags) - 484usize];
	["Offset of field: sctpstat::sctps_sends_with_unord"]
		[::std::mem::offset_of!(sctpstat, sctps_sends_with_unord) - 488usize];
	["Offset of field: sctpstat::sctps_sends_with_eof"]
		[::std::mem::offset_of!(sctpstat, sctps_sends_with_eof) - 492usize];
	["Offset of field: sctpstat::sctps_sends_with_abort"]
		[::std::mem::offset_of!(sctpstat, sctps_sends_with_abort) - 496usize];
	["Offset of field: sctpstat::sctps_protocol_drain_calls"]
		[::std::mem::offset_of!(sctpstat, sctps_protocol_drain_calls) - 500usize];
	["Offset of field: sctpstat::sctps_protocol_drains_done"]
		[::std::mem::offset_of!(sctpstat, sctps_protocol_drains_done) - 504usize];
	["Offset of field: sctpstat::sctps_read_peeks"]
		[::std::mem::offset_of!(sctpstat, sctps_read_peeks) - 508usize];
	["Offset of field: sctpstat::sctps_cached_chk"]
		[::std::mem::offset_of!(sctpstat, sctps_cached_chk) - 512usize];
	["Offset of field: sctpstat::sctps_cached_strmoq"]
		[::std::mem::offset_of!(sctpstat, sctps_cached_strmoq) - 516usize];
	["Offset of field: sctpstat::sctps_left_abandon"]
		[::std::mem::offset_of!(sctpstat, sctps_left_abandon) - 520usize];
	["Offset of field: sctpstat::sctps_send_burst_avoid"]
		[::std::mem::offset_of!(sctpstat, sctps_send_burst_avoid) - 524usize];
	["Offset of field: sctpstat::sctps_send_cwnd_avoid"]
		[::std::mem::offset_of!(sctpstat, sctps_send_cwnd_avoid) - 528usize];
	["Offset of field: sctpstat::sctps_fwdtsn_map_over"]
		[::std::mem::offset_of!(sctpstat, sctps_fwdtsn_map_over) - 532usize];
	["Offset of field: sctpstat::sctps_queue_upd_ecne"]
		[::std::mem::offset_of!(sctpstat, sctps_queue_upd_ecne) - 536usize];
	["Offset of field: sctpstat::sctps_recvzerocrc"]
		[::std::mem::offset_of!(sctpstat, sctps_recvzerocrc) - 540usize];
	["Offset of field: sctpstat::sctps_sendzerocrc"]
		[::std::mem::offset_of!(sctpstat, sctps_sendzerocrc) - 544usize];
	["Offset of field: sctpstat::sctps_reserved"]
		[::std::mem::offset_of!(sctpstat, sctps_reserved) - 548usize];
};
unsafe extern "C" {
	pub fn usrsctp_get_stat(arg1: *mut sctpstat);
}
